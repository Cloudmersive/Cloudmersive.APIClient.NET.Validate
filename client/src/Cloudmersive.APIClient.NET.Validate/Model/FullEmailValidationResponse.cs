/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Validate.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Validate.Model
{
    /// <summary>
    /// Full email addresss validation result
    /// </summary>
    [DataContract]
    public partial class FullEmailValidationResponse :  IEquatable<FullEmailValidationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FullEmailValidationResponse" /> class.
        /// </summary>
        /// <param name="validAddress">True if the email address is valid overall, false otherwise.</param>
        /// <param name="mailServerUsedForValidation">Email server connected to for verification.</param>
        /// <param name="validSyntax">True if the syntax of the email address is valid, false otherwise.  This is one component of ValidAddress, but not the only one..</param>
        /// <param name="validDomain">True if the domain name of the email address is valid, false otherwise.  This is one component of ValidAddress, but not the only one..</param>
        /// <param name="validSMTP">True if the email address was verified by the remote server, false otherwise.  This is one component of ValidAddress, but not the only one..</param>
        /// <param name="isCatchallDomain">True if the domain is a catch-all domain name, false otherwise.  Catch-all domain names, while rare, always accept inbound email to ensure they do not lose any potentially useful emails.  Catch-all domain names can occassionally be configured to first accept and store all inbound email, but then later send a bounce email back to the sender after a delayed period of time..</param>
        /// <param name="domain">Domain name of the email address.</param>
        public FullEmailValidationResponse(bool? validAddress = default(bool?), string mailServerUsedForValidation = default(string), bool? validSyntax = default(bool?), bool? validDomain = default(bool?), bool? validSMTP = default(bool?), bool? isCatchallDomain = default(bool?), string domain = default(string))
        {
            this.ValidAddress = validAddress;
            this.MailServerUsedForValidation = mailServerUsedForValidation;
            this.ValidSyntax = validSyntax;
            this.ValidDomain = validDomain;
            this.ValidSMTP = validSMTP;
            this.IsCatchallDomain = isCatchallDomain;
            this.Domain = domain;
        }
        
        /// <summary>
        /// True if the email address is valid overall, false otherwise
        /// </summary>
        /// <value>True if the email address is valid overall, false otherwise</value>
        [DataMember(Name="ValidAddress", EmitDefaultValue=false)]
        public bool? ValidAddress { get; set; }

        /// <summary>
        /// Email server connected to for verification
        /// </summary>
        /// <value>Email server connected to for verification</value>
        [DataMember(Name="MailServerUsedForValidation", EmitDefaultValue=false)]
        public string MailServerUsedForValidation { get; set; }

        /// <summary>
        /// True if the syntax of the email address is valid, false otherwise.  This is one component of ValidAddress, but not the only one.
        /// </summary>
        /// <value>True if the syntax of the email address is valid, false otherwise.  This is one component of ValidAddress, but not the only one.</value>
        [DataMember(Name="Valid_Syntax", EmitDefaultValue=false)]
        public bool? ValidSyntax { get; set; }

        /// <summary>
        /// True if the domain name of the email address is valid, false otherwise.  This is one component of ValidAddress, but not the only one.
        /// </summary>
        /// <value>True if the domain name of the email address is valid, false otherwise.  This is one component of ValidAddress, but not the only one.</value>
        [DataMember(Name="Valid_Domain", EmitDefaultValue=false)]
        public bool? ValidDomain { get; set; }

        /// <summary>
        /// True if the email address was verified by the remote server, false otherwise.  This is one component of ValidAddress, but not the only one.
        /// </summary>
        /// <value>True if the email address was verified by the remote server, false otherwise.  This is one component of ValidAddress, but not the only one.</value>
        [DataMember(Name="Valid_SMTP", EmitDefaultValue=false)]
        public bool? ValidSMTP { get; set; }

        /// <summary>
        /// True if the domain is a catch-all domain name, false otherwise.  Catch-all domain names, while rare, always accept inbound email to ensure they do not lose any potentially useful emails.  Catch-all domain names can occassionally be configured to first accept and store all inbound email, but then later send a bounce email back to the sender after a delayed period of time.
        /// </summary>
        /// <value>True if the domain is a catch-all domain name, false otherwise.  Catch-all domain names, while rare, always accept inbound email to ensure they do not lose any potentially useful emails.  Catch-all domain names can occassionally be configured to first accept and store all inbound email, but then later send a bounce email back to the sender after a delayed period of time.</value>
        [DataMember(Name="IsCatchallDomain", EmitDefaultValue=false)]
        public bool? IsCatchallDomain { get; set; }

        /// <summary>
        /// Domain name of the email address
        /// </summary>
        /// <value>Domain name of the email address</value>
        [DataMember(Name="Domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FullEmailValidationResponse {\n");
            sb.Append("  ValidAddress: ").Append(ValidAddress).Append("\n");
            sb.Append("  MailServerUsedForValidation: ").Append(MailServerUsedForValidation).Append("\n");
            sb.Append("  ValidSyntax: ").Append(ValidSyntax).Append("\n");
            sb.Append("  ValidDomain: ").Append(ValidDomain).Append("\n");
            sb.Append("  ValidSMTP: ").Append(ValidSMTP).Append("\n");
            sb.Append("  IsCatchallDomain: ").Append(IsCatchallDomain).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FullEmailValidationResponse);
        }

        /// <summary>
        /// Returns true if FullEmailValidationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FullEmailValidationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FullEmailValidationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ValidAddress == input.ValidAddress ||
                    (this.ValidAddress != null &&
                    this.ValidAddress.Equals(input.ValidAddress))
                ) && 
                (
                    this.MailServerUsedForValidation == input.MailServerUsedForValidation ||
                    (this.MailServerUsedForValidation != null &&
                    this.MailServerUsedForValidation.Equals(input.MailServerUsedForValidation))
                ) && 
                (
                    this.ValidSyntax == input.ValidSyntax ||
                    (this.ValidSyntax != null &&
                    this.ValidSyntax.Equals(input.ValidSyntax))
                ) && 
                (
                    this.ValidDomain == input.ValidDomain ||
                    (this.ValidDomain != null &&
                    this.ValidDomain.Equals(input.ValidDomain))
                ) && 
                (
                    this.ValidSMTP == input.ValidSMTP ||
                    (this.ValidSMTP != null &&
                    this.ValidSMTP.Equals(input.ValidSMTP))
                ) && 
                (
                    this.IsCatchallDomain == input.IsCatchallDomain ||
                    (this.IsCatchallDomain != null &&
                    this.IsCatchallDomain.Equals(input.IsCatchallDomain))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ValidAddress != null)
                    hashCode = hashCode * 59 + this.ValidAddress.GetHashCode();
                if (this.MailServerUsedForValidation != null)
                    hashCode = hashCode * 59 + this.MailServerUsedForValidation.GetHashCode();
                if (this.ValidSyntax != null)
                    hashCode = hashCode * 59 + this.ValidSyntax.GetHashCode();
                if (this.ValidDomain != null)
                    hashCode = hashCode * 59 + this.ValidDomain.GetHashCode();
                if (this.ValidSMTP != null)
                    hashCode = hashCode * 59 + this.ValidSMTP.GetHashCode();
                if (this.IsCatchallDomain != null)
                    hashCode = hashCode * 59 + this.IsCatchallDomain.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
