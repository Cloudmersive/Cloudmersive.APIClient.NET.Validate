/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Validate.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Validate.Model
{
    /// <summary>
    /// Result of a WHOIS operation
    /// </summary>
    [DataContract]
    public partial class WhoisResponse :  IEquatable<WhoisResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhoisResponse" /> class.
        /// </summary>
        /// <param name="validDomain">True if the domain is valid, false if it is not.</param>
        /// <param name="whoisServer">Server used to lookup WHOIS information (may change based on lookup)..</param>
        /// <param name="rawTextRecord">WHOIS raw text record.</param>
        /// <param name="createdDt">Creation date for the record.</param>
        public WhoisResponse(bool? validDomain = default(bool?), string whoisServer = default(string), string rawTextRecord = default(string), DateTime? createdDt = default(DateTime?))
        {
            this.ValidDomain = validDomain;
            this.WhoisServer = whoisServer;
            this.RawTextRecord = rawTextRecord;
            this.CreatedDt = createdDt;
        }
        
        /// <summary>
        /// True if the domain is valid, false if it is not
        /// </summary>
        /// <value>True if the domain is valid, false if it is not</value>
        [DataMember(Name="ValidDomain", EmitDefaultValue=false)]
        public bool? ValidDomain { get; set; }

        /// <summary>
        /// Server used to lookup WHOIS information (may change based on lookup).
        /// </summary>
        /// <value>Server used to lookup WHOIS information (may change based on lookup).</value>
        [DataMember(Name="WhoisServer", EmitDefaultValue=false)]
        public string WhoisServer { get; set; }

        /// <summary>
        /// WHOIS raw text record
        /// </summary>
        /// <value>WHOIS raw text record</value>
        [DataMember(Name="RawTextRecord", EmitDefaultValue=false)]
        public string RawTextRecord { get; set; }

        /// <summary>
        /// Creation date for the record
        /// </summary>
        /// <value>Creation date for the record</value>
        [DataMember(Name="CreatedDt", EmitDefaultValue=false)]
        public DateTime? CreatedDt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WhoisResponse {\n");
            sb.Append("  ValidDomain: ").Append(ValidDomain).Append("\n");
            sb.Append("  WhoisServer: ").Append(WhoisServer).Append("\n");
            sb.Append("  RawTextRecord: ").Append(RawTextRecord).Append("\n");
            sb.Append("  CreatedDt: ").Append(CreatedDt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WhoisResponse);
        }

        /// <summary>
        /// Returns true if WhoisResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WhoisResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WhoisResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ValidDomain == input.ValidDomain ||
                    (this.ValidDomain != null &&
                    this.ValidDomain.Equals(input.ValidDomain))
                ) && 
                (
                    this.WhoisServer == input.WhoisServer ||
                    (this.WhoisServer != null &&
                    this.WhoisServer.Equals(input.WhoisServer))
                ) && 
                (
                    this.RawTextRecord == input.RawTextRecord ||
                    (this.RawTextRecord != null &&
                    this.RawTextRecord.Equals(input.RawTextRecord))
                ) && 
                (
                    this.CreatedDt == input.CreatedDt ||
                    (this.CreatedDt != null &&
                    this.CreatedDt.Equals(input.CreatedDt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ValidDomain != null)
                    hashCode = hashCode * 59 + this.ValidDomain.GetHashCode();
                if (this.WhoisServer != null)
                    hashCode = hashCode * 59 + this.WhoisServer.GetHashCode();
                if (this.RawTextRecord != null)
                    hashCode = hashCode * 59 + this.RawTextRecord.GetHashCode();
                if (this.CreatedDt != null)
                    hashCode = hashCode * 59 + this.CreatedDt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
