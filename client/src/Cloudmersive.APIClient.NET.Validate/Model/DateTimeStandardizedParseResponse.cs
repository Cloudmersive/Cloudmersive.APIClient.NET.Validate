/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Validate.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Validate.Model
{
    /// <summary>
    /// Result of performing a date time parsing
    /// </summary>
    [DataContract]
    public partial class DateTimeStandardizedParseResponse :  IEquatable<DateTimeStandardizedParseResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateTimeStandardizedParseResponse" /> class.
        /// </summary>
        /// <param name="successful">True if successful, false otherwise.</param>
        /// <param name="parsedDateResult">Result of performing a date time parsing.</param>
        /// <param name="year">Year of the parsed date time result.</param>
        /// <param name="month">Month of the parsed date time result.</param>
        /// <param name="day">Day of the parsed date time result.</param>
        /// <param name="hour">Hour of the parsed date time result (24-hour).</param>
        /// <param name="minute">Minute of the parsed date time result.</param>
        /// <param name="second">Second of the parsed date time result.</param>
        /// <param name="dayOfWeek">Day of week.</param>
        public DateTimeStandardizedParseResponse(bool? successful = default(bool?), DateTime? parsedDateResult = default(DateTime?), int? year = default(int?), int? month = default(int?), int? day = default(int?), int? hour = default(int?), int? minute = default(int?), int? second = default(int?), string dayOfWeek = default(string))
        {
            this.Successful = successful;
            this.ParsedDateResult = parsedDateResult;
            this.Year = year;
            this.Month = month;
            this.Day = day;
            this.Hour = hour;
            this.Minute = minute;
            this.Second = second;
            this.DayOfWeek = dayOfWeek;
        }
        
        /// <summary>
        /// True if successful, false otherwise
        /// </summary>
        /// <value>True if successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Result of performing a date time parsing
        /// </summary>
        /// <value>Result of performing a date time parsing</value>
        [DataMember(Name="ParsedDateResult", EmitDefaultValue=false)]
        public DateTime? ParsedDateResult { get; set; }

        /// <summary>
        /// Year of the parsed date time result
        /// </summary>
        /// <value>Year of the parsed date time result</value>
        [DataMember(Name="Year", EmitDefaultValue=false)]
        public int? Year { get; set; }

        /// <summary>
        /// Month of the parsed date time result
        /// </summary>
        /// <value>Month of the parsed date time result</value>
        [DataMember(Name="Month", EmitDefaultValue=false)]
        public int? Month { get; set; }

        /// <summary>
        /// Day of the parsed date time result
        /// </summary>
        /// <value>Day of the parsed date time result</value>
        [DataMember(Name="Day", EmitDefaultValue=false)]
        public int? Day { get; set; }

        /// <summary>
        /// Hour of the parsed date time result (24-hour)
        /// </summary>
        /// <value>Hour of the parsed date time result (24-hour)</value>
        [DataMember(Name="Hour", EmitDefaultValue=false)]
        public int? Hour { get; set; }

        /// <summary>
        /// Minute of the parsed date time result
        /// </summary>
        /// <value>Minute of the parsed date time result</value>
        [DataMember(Name="Minute", EmitDefaultValue=false)]
        public int? Minute { get; set; }

        /// <summary>
        /// Second of the parsed date time result
        /// </summary>
        /// <value>Second of the parsed date time result</value>
        [DataMember(Name="Second", EmitDefaultValue=false)]
        public int? Second { get; set; }

        /// <summary>
        /// Day of week
        /// </summary>
        /// <value>Day of week</value>
        [DataMember(Name="DayOfWeek", EmitDefaultValue=false)]
        public string DayOfWeek { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateTimeStandardizedParseResponse {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  ParsedDateResult: ").Append(ParsedDateResult).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Hour: ").Append(Hour).Append("\n");
            sb.Append("  Minute: ").Append(Minute).Append("\n");
            sb.Append("  Second: ").Append(Second).Append("\n");
            sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateTimeStandardizedParseResponse);
        }

        /// <summary>
        /// Returns true if DateTimeStandardizedParseResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DateTimeStandardizedParseResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateTimeStandardizedParseResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.ParsedDateResult == input.ParsedDateResult ||
                    (this.ParsedDateResult != null &&
                    this.ParsedDateResult.Equals(input.ParsedDateResult))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.Month == input.Month ||
                    (this.Month != null &&
                    this.Month.Equals(input.Month))
                ) && 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.Hour == input.Hour ||
                    (this.Hour != null &&
                    this.Hour.Equals(input.Hour))
                ) && 
                (
                    this.Minute == input.Minute ||
                    (this.Minute != null &&
                    this.Minute.Equals(input.Minute))
                ) && 
                (
                    this.Second == input.Second ||
                    (this.Second != null &&
                    this.Second.Equals(input.Second))
                ) && 
                (
                    this.DayOfWeek == input.DayOfWeek ||
                    (this.DayOfWeek != null &&
                    this.DayOfWeek.Equals(input.DayOfWeek))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.ParsedDateResult != null)
                    hashCode = hashCode * 59 + this.ParsedDateResult.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.Month != null)
                    hashCode = hashCode * 59 + this.Month.GetHashCode();
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                if (this.Hour != null)
                    hashCode = hashCode * 59 + this.Hour.GetHashCode();
                if (this.Minute != null)
                    hashCode = hashCode * 59 + this.Minute.GetHashCode();
                if (this.Second != null)
                    hashCode = hashCode * 59 + this.Second.GetHashCode();
                if (this.DayOfWeek != null)
                    hashCode = hashCode * 59 + this.DayOfWeek.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
