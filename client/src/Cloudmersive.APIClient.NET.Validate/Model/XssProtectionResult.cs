/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Validate.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Validate.Model
{
    /// <summary>
    /// Result of performing an XSS protection operation
    /// </summary>
    [DataContract]
    public partial class XssProtectionResult :  IEquatable<XssProtectionResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XssProtectionResult" /> class.
        /// </summary>
        /// <param name="successful">True if the operation was successful, false otherwise.</param>
        /// <param name="containedXss">True if the input contained XSS scripting, false otherwise.</param>
        /// <param name="originalInput">Original input string.</param>
        /// <param name="normalizedResult">Normalized string result, with XSS removed.</param>
        public XssProtectionResult(bool? successful = default(bool?), bool? containedXss = default(bool?), string originalInput = default(string), string normalizedResult = default(string))
        {
            this.Successful = successful;
            this.ContainedXss = containedXss;
            this.OriginalInput = originalInput;
            this.NormalizedResult = normalizedResult;
        }
        
        /// <summary>
        /// True if the operation was successful, false otherwise
        /// </summary>
        /// <value>True if the operation was successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// True if the input contained XSS scripting, false otherwise
        /// </summary>
        /// <value>True if the input contained XSS scripting, false otherwise</value>
        [DataMember(Name="ContainedXss", EmitDefaultValue=false)]
        public bool? ContainedXss { get; set; }

        /// <summary>
        /// Original input string
        /// </summary>
        /// <value>Original input string</value>
        [DataMember(Name="OriginalInput", EmitDefaultValue=false)]
        public string OriginalInput { get; set; }

        /// <summary>
        /// Normalized string result, with XSS removed
        /// </summary>
        /// <value>Normalized string result, with XSS removed</value>
        [DataMember(Name="NormalizedResult", EmitDefaultValue=false)]
        public string NormalizedResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XssProtectionResult {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  ContainedXss: ").Append(ContainedXss).Append("\n");
            sb.Append("  OriginalInput: ").Append(OriginalInput).Append("\n");
            sb.Append("  NormalizedResult: ").Append(NormalizedResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XssProtectionResult);
        }

        /// <summary>
        /// Returns true if XssProtectionResult instances are equal
        /// </summary>
        /// <param name="input">Instance of XssProtectionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XssProtectionResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.ContainedXss == input.ContainedXss ||
                    (this.ContainedXss != null &&
                    this.ContainedXss.Equals(input.ContainedXss))
                ) && 
                (
                    this.OriginalInput == input.OriginalInput ||
                    (this.OriginalInput != null &&
                    this.OriginalInput.Equals(input.OriginalInput))
                ) && 
                (
                    this.NormalizedResult == input.NormalizedResult ||
                    (this.NormalizedResult != null &&
                    this.NormalizedResult.Equals(input.NormalizedResult))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.ContainedXss != null)
                    hashCode = hashCode * 59 + this.ContainedXss.GetHashCode();
                if (this.OriginalInput != null)
                    hashCode = hashCode * 59 + this.OriginalInput.GetHashCode();
                if (this.NormalizedResult != null)
                    hashCode = hashCode * 59 + this.NormalizedResult.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
