/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Validate.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Validate.Model
{
    /// <summary>
    /// Identifier validation request, including the input identifier as well as various identifier rules
    /// </summary>
    [DataContract]
    public partial class ValidateIdentifierRequest :  IEquatable<ValidateIdentifierRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateIdentifierRequest" /> class.
        /// </summary>
        /// <param name="input">Text string identifier input.</param>
        /// <param name="allowWhitespace">True if whitespace is allowed in the identifier, false otherwise.</param>
        /// <param name="allowHyphens">True if hyphens are allowd in the identifier, false otherwise.</param>
        /// <param name="allowUnderscore">True if underscores are allowed in the identifier, false otherwise.</param>
        /// <param name="allowNumbers">True if numbers are allowed in the identifier, false otherwise.</param>
        /// <param name="allowPeriods">True if periods are allowed in the identifier, false otherwise.</param>
        /// <param name="maxLength">Optional; maximum length, if any, of the identifier.</param>
        /// <param name="minLength">Optional; minimum length, if any, of the identifier.</param>
        public ValidateIdentifierRequest(string input = default(string), bool? allowWhitespace = default(bool?), bool? allowHyphens = default(bool?), bool? allowUnderscore = default(bool?), bool? allowNumbers = default(bool?), bool? allowPeriods = default(bool?), int? maxLength = default(int?), int? minLength = default(int?))
        {
            this.Input = input;
            this.AllowWhitespace = allowWhitespace;
            this.AllowHyphens = allowHyphens;
            this.AllowUnderscore = allowUnderscore;
            this.AllowNumbers = allowNumbers;
            this.AllowPeriods = allowPeriods;
            this.MaxLength = maxLength;
            this.MinLength = minLength;
        }
        
        /// <summary>
        /// Text string identifier input
        /// </summary>
        /// <value>Text string identifier input</value>
        [DataMember(Name="Input", EmitDefaultValue=false)]
        public string Input { get; set; }

        /// <summary>
        /// True if whitespace is allowed in the identifier, false otherwise
        /// </summary>
        /// <value>True if whitespace is allowed in the identifier, false otherwise</value>
        [DataMember(Name="AllowWhitespace", EmitDefaultValue=false)]
        public bool? AllowWhitespace { get; set; }

        /// <summary>
        /// True if hyphens are allowd in the identifier, false otherwise
        /// </summary>
        /// <value>True if hyphens are allowd in the identifier, false otherwise</value>
        [DataMember(Name="AllowHyphens", EmitDefaultValue=false)]
        public bool? AllowHyphens { get; set; }

        /// <summary>
        /// True if underscores are allowed in the identifier, false otherwise
        /// </summary>
        /// <value>True if underscores are allowed in the identifier, false otherwise</value>
        [DataMember(Name="AllowUnderscore", EmitDefaultValue=false)]
        public bool? AllowUnderscore { get; set; }

        /// <summary>
        /// True if numbers are allowed in the identifier, false otherwise
        /// </summary>
        /// <value>True if numbers are allowed in the identifier, false otherwise</value>
        [DataMember(Name="AllowNumbers", EmitDefaultValue=false)]
        public bool? AllowNumbers { get; set; }

        /// <summary>
        /// True if periods are allowed in the identifier, false otherwise
        /// </summary>
        /// <value>True if periods are allowed in the identifier, false otherwise</value>
        [DataMember(Name="AllowPeriods", EmitDefaultValue=false)]
        public bool? AllowPeriods { get; set; }

        /// <summary>
        /// Optional; maximum length, if any, of the identifier
        /// </summary>
        /// <value>Optional; maximum length, if any, of the identifier</value>
        [DataMember(Name="MaxLength", EmitDefaultValue=false)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// Optional; minimum length, if any, of the identifier
        /// </summary>
        /// <value>Optional; minimum length, if any, of the identifier</value>
        [DataMember(Name="MinLength", EmitDefaultValue=false)]
        public int? MinLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidateIdentifierRequest {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  AllowWhitespace: ").Append(AllowWhitespace).Append("\n");
            sb.Append("  AllowHyphens: ").Append(AllowHyphens).Append("\n");
            sb.Append("  AllowUnderscore: ").Append(AllowUnderscore).Append("\n");
            sb.Append("  AllowNumbers: ").Append(AllowNumbers).Append("\n");
            sb.Append("  AllowPeriods: ").Append(AllowPeriods).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidateIdentifierRequest);
        }

        /// <summary>
        /// Returns true if ValidateIdentifierRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidateIdentifierRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidateIdentifierRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.AllowWhitespace == input.AllowWhitespace ||
                    (this.AllowWhitespace != null &&
                    this.AllowWhitespace.Equals(input.AllowWhitespace))
                ) && 
                (
                    this.AllowHyphens == input.AllowHyphens ||
                    (this.AllowHyphens != null &&
                    this.AllowHyphens.Equals(input.AllowHyphens))
                ) && 
                (
                    this.AllowUnderscore == input.AllowUnderscore ||
                    (this.AllowUnderscore != null &&
                    this.AllowUnderscore.Equals(input.AllowUnderscore))
                ) && 
                (
                    this.AllowNumbers == input.AllowNumbers ||
                    (this.AllowNumbers != null &&
                    this.AllowNumbers.Equals(input.AllowNumbers))
                ) && 
                (
                    this.AllowPeriods == input.AllowPeriods ||
                    (this.AllowPeriods != null &&
                    this.AllowPeriods.Equals(input.AllowPeriods))
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                ) && 
                (
                    this.MinLength == input.MinLength ||
                    (this.MinLength != null &&
                    this.MinLength.Equals(input.MinLength))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.AllowWhitespace != null)
                    hashCode = hashCode * 59 + this.AllowWhitespace.GetHashCode();
                if (this.AllowHyphens != null)
                    hashCode = hashCode * 59 + this.AllowHyphens.GetHashCode();
                if (this.AllowUnderscore != null)
                    hashCode = hashCode * 59 + this.AllowUnderscore.GetHashCode();
                if (this.AllowNumbers != null)
                    hashCode = hashCode * 59 + this.AllowNumbers.GetHashCode();
                if (this.AllowPeriods != null)
                    hashCode = hashCode * 59 + this.AllowPeriods.GetHashCode();
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                if (this.MinLength != null)
                    hashCode = hashCode * 59 + this.MinLength.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
