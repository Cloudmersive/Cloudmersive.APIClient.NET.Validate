/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Validate.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Validate.Model
{
    /// <summary>
    /// Syntactic validity of email address
    /// </summary>
    [DataContract]
    public partial class AddressVerifySyntaxOnlyResponse :  IEquatable<AddressVerifySyntaxOnlyResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressVerifySyntaxOnlyResponse" /> class.
        /// </summary>
        /// <param name="validAddress">True if the email address is syntactically valid, false if it is not.</param>
        /// <param name="domain">Domain name of the email address.</param>
        /// <param name="isFreeEmailProvider">True if the email domain name is a free provider (typically a free to sign up web email provider for consumers / personal use), false otherwise..</param>
        /// <param name="isDisposable">True if the email address is a disposable email address, false otherwise; these disposable providers are not typically used to receive email and so will have a low likelihood of opening mail sent there..</param>
        public AddressVerifySyntaxOnlyResponse(bool? validAddress = default(bool?), string domain = default(string), bool? isFreeEmailProvider = default(bool?), bool? isDisposable = default(bool?))
        {
            this.ValidAddress = validAddress;
            this.Domain = domain;
            this.IsFreeEmailProvider = isFreeEmailProvider;
            this.IsDisposable = isDisposable;
        }
        
        /// <summary>
        /// True if the email address is syntactically valid, false if it is not
        /// </summary>
        /// <value>True if the email address is syntactically valid, false if it is not</value>
        [DataMember(Name="ValidAddress", EmitDefaultValue=false)]
        public bool? ValidAddress { get; set; }

        /// <summary>
        /// Domain name of the email address
        /// </summary>
        /// <value>Domain name of the email address</value>
        [DataMember(Name="Domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// True if the email domain name is a free provider (typically a free to sign up web email provider for consumers / personal use), false otherwise.
        /// </summary>
        /// <value>True if the email domain name is a free provider (typically a free to sign up web email provider for consumers / personal use), false otherwise.</value>
        [DataMember(Name="IsFreeEmailProvider", EmitDefaultValue=false)]
        public bool? IsFreeEmailProvider { get; set; }

        /// <summary>
        /// True if the email address is a disposable email address, false otherwise; these disposable providers are not typically used to receive email and so will have a low likelihood of opening mail sent there.
        /// </summary>
        /// <value>True if the email address is a disposable email address, false otherwise; these disposable providers are not typically used to receive email and so will have a low likelihood of opening mail sent there.</value>
        [DataMember(Name="IsDisposable", EmitDefaultValue=false)]
        public bool? IsDisposable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressVerifySyntaxOnlyResponse {\n");
            sb.Append("  ValidAddress: ").Append(ValidAddress).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  IsFreeEmailProvider: ").Append(IsFreeEmailProvider).Append("\n");
            sb.Append("  IsDisposable: ").Append(IsDisposable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressVerifySyntaxOnlyResponse);
        }

        /// <summary>
        /// Returns true if AddressVerifySyntaxOnlyResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressVerifySyntaxOnlyResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressVerifySyntaxOnlyResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ValidAddress == input.ValidAddress ||
                    (this.ValidAddress != null &&
                    this.ValidAddress.Equals(input.ValidAddress))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.IsFreeEmailProvider == input.IsFreeEmailProvider ||
                    (this.IsFreeEmailProvider != null &&
                    this.IsFreeEmailProvider.Equals(input.IsFreeEmailProvider))
                ) && 
                (
                    this.IsDisposable == input.IsDisposable ||
                    (this.IsDisposable != null &&
                    this.IsDisposable.Equals(input.IsDisposable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ValidAddress != null)
                    hashCode = hashCode * 59 + this.ValidAddress.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.IsFreeEmailProvider != null)
                    hashCode = hashCode * 59 + this.IsFreeEmailProvider.GetHashCode();
                if (this.IsDisposable != null)
                    hashCode = hashCode * 59 + this.IsDisposable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
