/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Validate.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Validate.Model
{
    /// <summary>
    /// Individual item to detect for XXE
    /// </summary>
    [DataContract]
    public partial class XxeDetectionRequestItem :  IEquatable<XxeDetectionRequestItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XxeDetectionRequestItem" /> class.
        /// </summary>
        /// <param name="inputText">Individual input text item to protect from XXE.</param>
        /// <param name="allowInternetUrls">Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false..</param>
        /// <param name="knownSafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe..</param>
        /// <param name="knownUnsafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe..</param>
        public XxeDetectionRequestItem(string inputText = default(string), bool? allowInternetUrls = default(bool?), List<string> knownSafeUrls = default(List<string>), List<string> knownUnsafeUrls = default(List<string>))
        {
            this.InputText = inputText;
            this.AllowInternetUrls = allowInternetUrls;
            this.KnownSafeUrls = knownSafeUrls;
            this.KnownUnsafeUrls = knownUnsafeUrls;
        }
        
        /// <summary>
        /// Individual input text item to protect from XXE
        /// </summary>
        /// <value>Individual input text item to protect from XXE</value>
        [DataMember(Name="InputText", EmitDefaultValue=false)]
        public string InputText { get; set; }

        /// <summary>
        /// Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false.
        /// </summary>
        /// <value>Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false.</value>
        [DataMember(Name="AllowInternetUrls", EmitDefaultValue=false)]
        public bool? AllowInternetUrls { get; set; }

        /// <summary>
        /// Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe.
        /// </summary>
        /// <value>Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe.</value>
        [DataMember(Name="KnownSafeUrls", EmitDefaultValue=false)]
        public List<string> KnownSafeUrls { get; set; }

        /// <summary>
        /// Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe.
        /// </summary>
        /// <value>Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe.</value>
        [DataMember(Name="KnownUnsafeUrls", EmitDefaultValue=false)]
        public List<string> KnownUnsafeUrls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XxeDetectionRequestItem {\n");
            sb.Append("  InputText: ").Append(InputText).Append("\n");
            sb.Append("  AllowInternetUrls: ").Append(AllowInternetUrls).Append("\n");
            sb.Append("  KnownSafeUrls: ").Append(KnownSafeUrls).Append("\n");
            sb.Append("  KnownUnsafeUrls: ").Append(KnownUnsafeUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XxeDetectionRequestItem);
        }

        /// <summary>
        /// Returns true if XxeDetectionRequestItem instances are equal
        /// </summary>
        /// <param name="input">Instance of XxeDetectionRequestItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XxeDetectionRequestItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputText == input.InputText ||
                    (this.InputText != null &&
                    this.InputText.Equals(input.InputText))
                ) && 
                (
                    this.AllowInternetUrls == input.AllowInternetUrls ||
                    (this.AllowInternetUrls != null &&
                    this.AllowInternetUrls.Equals(input.AllowInternetUrls))
                ) && 
                (
                    this.KnownSafeUrls == input.KnownSafeUrls ||
                    this.KnownSafeUrls != null &&
                    this.KnownSafeUrls.SequenceEqual(input.KnownSafeUrls)
                ) && 
                (
                    this.KnownUnsafeUrls == input.KnownUnsafeUrls ||
                    this.KnownUnsafeUrls != null &&
                    this.KnownUnsafeUrls.SequenceEqual(input.KnownUnsafeUrls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputText != null)
                    hashCode = hashCode * 59 + this.InputText.GetHashCode();
                if (this.AllowInternetUrls != null)
                    hashCode = hashCode * 59 + this.AllowInternetUrls.GetHashCode();
                if (this.KnownSafeUrls != null)
                    hashCode = hashCode * 59 + this.KnownSafeUrls.GetHashCode();
                if (this.KnownUnsafeUrls != null)
                    hashCode = hashCode * 59 + this.KnownUnsafeUrls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
