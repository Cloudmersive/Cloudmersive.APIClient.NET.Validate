/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Validate.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Validate.Model
{
    /// <summary>
    /// Request to parse an address formatted as a string/free text into a structured address
    /// </summary>
    [DataContract]
    public partial class ParseAddressRequest :  IEquatable<ParseAddressRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParseAddressRequest" /> class.
        /// </summary>
        /// <param name="addressString">A mailing address or street address formatted as a single text string; this will be parsed into its components.</param>
        /// <param name="capitalizationMode">Optional; indicates how the parsed output should be capitalized; default is Title Case; possible values are: \&quot;Uppercase\&quot; will set the capitalization to UPPER CASE; \&quot;Lowercase\&quot; will set the capitalization to lower case; \&quot;Titlecase\&quot; will set the capitalization to Title Case; and \&quot;Originalcase\&quot; will preserve the original casing as much as possible.</param>
        public ParseAddressRequest(string addressString = default(string), string capitalizationMode = default(string))
        {
            this.AddressString = addressString;
            this.CapitalizationMode = capitalizationMode;
        }
        
        /// <summary>
        /// A mailing address or street address formatted as a single text string; this will be parsed into its components
        /// </summary>
        /// <value>A mailing address or street address formatted as a single text string; this will be parsed into its components</value>
        [DataMember(Name="AddressString", EmitDefaultValue=false)]
        public string AddressString { get; set; }

        /// <summary>
        /// Optional; indicates how the parsed output should be capitalized; default is Title Case; possible values are: \&quot;Uppercase\&quot; will set the capitalization to UPPER CASE; \&quot;Lowercase\&quot; will set the capitalization to lower case; \&quot;Titlecase\&quot; will set the capitalization to Title Case; and \&quot;Originalcase\&quot; will preserve the original casing as much as possible
        /// </summary>
        /// <value>Optional; indicates how the parsed output should be capitalized; default is Title Case; possible values are: \&quot;Uppercase\&quot; will set the capitalization to UPPER CASE; \&quot;Lowercase\&quot; will set the capitalization to lower case; \&quot;Titlecase\&quot; will set the capitalization to Title Case; and \&quot;Originalcase\&quot; will preserve the original casing as much as possible</value>
        [DataMember(Name="CapitalizationMode", EmitDefaultValue=false)]
        public string CapitalizationMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParseAddressRequest {\n");
            sb.Append("  AddressString: ").Append(AddressString).Append("\n");
            sb.Append("  CapitalizationMode: ").Append(CapitalizationMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParseAddressRequest);
        }

        /// <summary>
        /// Returns true if ParseAddressRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ParseAddressRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParseAddressRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressString == input.AddressString ||
                    (this.AddressString != null &&
                    this.AddressString.Equals(input.AddressString))
                ) && 
                (
                    this.CapitalizationMode == input.CapitalizationMode ||
                    (this.CapitalizationMode != null &&
                    this.CapitalizationMode.Equals(input.CapitalizationMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressString != null)
                    hashCode = hashCode * 59 + this.AddressString.GetHashCode();
                if (this.CapitalizationMode != null)
                    hashCode = hashCode * 59 + this.CapitalizationMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
