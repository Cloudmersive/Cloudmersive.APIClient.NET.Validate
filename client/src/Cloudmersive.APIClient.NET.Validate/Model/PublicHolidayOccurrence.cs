/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Validate.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Validate.Model
{
    /// <summary>
    /// Public holiday occurrence
    /// </summary>
    [DataContract]
    public partial class PublicHolidayOccurrence :  IEquatable<PublicHolidayOccurrence>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicHolidayOccurrence" /> class.
        /// </summary>
        /// <param name="englishName">Name of the holiday in English.</param>
        /// <param name="localName">Local name of the holiday.</param>
        /// <param name="occurrenceDate">Date of the holiday (start time).</param>
        /// <param name="holidayType">Type of the holiday; possible values are: Public, Bank, School, Authorities, Optional, Observance.</param>
        /// <param name="nationwaide">True if the holiday is celebrated in all locales in the country, false otherwise.</param>
        public PublicHolidayOccurrence(string englishName = default(string), string localName = default(string), DateTime? occurrenceDate = default(DateTime?), string holidayType = default(string), bool? nationwaide = default(bool?))
        {
            this.EnglishName = englishName;
            this.LocalName = localName;
            this.OccurrenceDate = occurrenceDate;
            this.HolidayType = holidayType;
            this.Nationwaide = nationwaide;
        }
        
        /// <summary>
        /// Name of the holiday in English
        /// </summary>
        /// <value>Name of the holiday in English</value>
        [DataMember(Name="EnglishName", EmitDefaultValue=false)]
        public string EnglishName { get; set; }

        /// <summary>
        /// Local name of the holiday
        /// </summary>
        /// <value>Local name of the holiday</value>
        [DataMember(Name="LocalName", EmitDefaultValue=false)]
        public string LocalName { get; set; }

        /// <summary>
        /// Date of the holiday (start time)
        /// </summary>
        /// <value>Date of the holiday (start time)</value>
        [DataMember(Name="OccurrenceDate", EmitDefaultValue=false)]
        public DateTime? OccurrenceDate { get; set; }

        /// <summary>
        /// Type of the holiday; possible values are: Public, Bank, School, Authorities, Optional, Observance
        /// </summary>
        /// <value>Type of the holiday; possible values are: Public, Bank, School, Authorities, Optional, Observance</value>
        [DataMember(Name="HolidayType", EmitDefaultValue=false)]
        public string HolidayType { get; set; }

        /// <summary>
        /// True if the holiday is celebrated in all locales in the country, false otherwise
        /// </summary>
        /// <value>True if the holiday is celebrated in all locales in the country, false otherwise</value>
        [DataMember(Name="Nationwaide", EmitDefaultValue=false)]
        public bool? Nationwaide { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicHolidayOccurrence {\n");
            sb.Append("  EnglishName: ").Append(EnglishName).Append("\n");
            sb.Append("  LocalName: ").Append(LocalName).Append("\n");
            sb.Append("  OccurrenceDate: ").Append(OccurrenceDate).Append("\n");
            sb.Append("  HolidayType: ").Append(HolidayType).Append("\n");
            sb.Append("  Nationwaide: ").Append(Nationwaide).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicHolidayOccurrence);
        }

        /// <summary>
        /// Returns true if PublicHolidayOccurrence instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicHolidayOccurrence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicHolidayOccurrence input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnglishName == input.EnglishName ||
                    (this.EnglishName != null &&
                    this.EnglishName.Equals(input.EnglishName))
                ) && 
                (
                    this.LocalName == input.LocalName ||
                    (this.LocalName != null &&
                    this.LocalName.Equals(input.LocalName))
                ) && 
                (
                    this.OccurrenceDate == input.OccurrenceDate ||
                    (this.OccurrenceDate != null &&
                    this.OccurrenceDate.Equals(input.OccurrenceDate))
                ) && 
                (
                    this.HolidayType == input.HolidayType ||
                    (this.HolidayType != null &&
                    this.HolidayType.Equals(input.HolidayType))
                ) && 
                (
                    this.Nationwaide == input.Nationwaide ||
                    (this.Nationwaide != null &&
                    this.Nationwaide.Equals(input.Nationwaide))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnglishName != null)
                    hashCode = hashCode * 59 + this.EnglishName.GetHashCode();
                if (this.LocalName != null)
                    hashCode = hashCode * 59 + this.LocalName.GetHashCode();
                if (this.OccurrenceDate != null)
                    hashCode = hashCode * 59 + this.OccurrenceDate.GetHashCode();
                if (this.HolidayType != null)
                    hashCode = hashCode * 59 + this.HolidayType.GetHashCode();
                if (this.Nationwaide != null)
                    hashCode = hashCode * 59 + this.Nationwaide.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
