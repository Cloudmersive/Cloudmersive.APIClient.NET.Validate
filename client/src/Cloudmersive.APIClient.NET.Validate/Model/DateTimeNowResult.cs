/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Validate.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Validate.Model
{
    /// <summary>
    /// Current date and time response
    /// </summary>
    [DataContract]
    public partial class DateTimeNowResult :  IEquatable<DateTimeNowResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateTimeNowResult" /> class.
        /// </summary>
        /// <param name="successful">True if successful, false otherwise.</param>
        /// <param name="now">Current date, time, and time zone in standard JSON date format.</param>
        /// <param name="nowGmt">Current GMT-time-zone date, time, and time zone in standard JSON date format.</param>
        public DateTimeNowResult(bool? successful = default(bool?), DateTime? now = default(DateTime?), DateTime? nowGmt = default(DateTime?))
        {
            this.Successful = successful;
            this.Now = now;
            this.NowGmt = nowGmt;
        }
        
        /// <summary>
        /// True if successful, false otherwise
        /// </summary>
        /// <value>True if successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Current date, time, and time zone in standard JSON date format
        /// </summary>
        /// <value>Current date, time, and time zone in standard JSON date format</value>
        [DataMember(Name="Now", EmitDefaultValue=false)]
        public DateTime? Now { get; set; }

        /// <summary>
        /// Current GMT-time-zone date, time, and time zone in standard JSON date format
        /// </summary>
        /// <value>Current GMT-time-zone date, time, and time zone in standard JSON date format</value>
        [DataMember(Name="NowGmt", EmitDefaultValue=false)]
        public DateTime? NowGmt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateTimeNowResult {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  Now: ").Append(Now).Append("\n");
            sb.Append("  NowGmt: ").Append(NowGmt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateTimeNowResult);
        }

        /// <summary>
        /// Returns true if DateTimeNowResult instances are equal
        /// </summary>
        /// <param name="input">Instance of DateTimeNowResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateTimeNowResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.Now == input.Now ||
                    (this.Now != null &&
                    this.Now.Equals(input.Now))
                ) && 
                (
                    this.NowGmt == input.NowGmt ||
                    (this.NowGmt != null &&
                    this.NowGmt.Equals(input.NowGmt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.Now != null)
                    hashCode = hashCode * 59 + this.Now.GetHashCode();
                if (this.NowGmt != null)
                    hashCode = hashCode * 59 + this.NowGmt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
