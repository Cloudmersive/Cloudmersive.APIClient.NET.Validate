/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Validate.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Validate.Model
{
    /// <summary>
    /// Input to a batch SQL Injection detection operation
    /// </summary>
    [DataContract]
    public partial class SqlInjectionCheckBatchRequest :  IEquatable<SqlInjectionCheckBatchRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlInjectionCheckBatchRequest" /> class.
        /// </summary>
        /// <param name="requestItems">Multiple items to detect for SQL Injection.</param>
        /// <param name="detectionLevel">Set to Normal to target a high-security SQL Injection detection level with a very low false positive rate; select High to target a very-high security SQL Injection detection level with higher false positives.  Default is Normal (recommended)..</param>
        public SqlInjectionCheckBatchRequest(List<SqlInjectionCheckRequestItem> requestItems = default(List<SqlInjectionCheckRequestItem>), string detectionLevel = default(string))
        {
            this.RequestItems = requestItems;
            this.DetectionLevel = detectionLevel;
        }
        
        /// <summary>
        /// Multiple items to detect for SQL Injection
        /// </summary>
        /// <value>Multiple items to detect for SQL Injection</value>
        [DataMember(Name="RequestItems", EmitDefaultValue=false)]
        public List<SqlInjectionCheckRequestItem> RequestItems { get; set; }

        /// <summary>
        /// Set to Normal to target a high-security SQL Injection detection level with a very low false positive rate; select High to target a very-high security SQL Injection detection level with higher false positives.  Default is Normal (recommended).
        /// </summary>
        /// <value>Set to Normal to target a high-security SQL Injection detection level with a very low false positive rate; select High to target a very-high security SQL Injection detection level with higher false positives.  Default is Normal (recommended).</value>
        [DataMember(Name="DetectionLevel", EmitDefaultValue=false)]
        public string DetectionLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SqlInjectionCheckBatchRequest {\n");
            sb.Append("  RequestItems: ").Append(RequestItems).Append("\n");
            sb.Append("  DetectionLevel: ").Append(DetectionLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SqlInjectionCheckBatchRequest);
        }

        /// <summary>
        /// Returns true if SqlInjectionCheckBatchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SqlInjectionCheckBatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SqlInjectionCheckBatchRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestItems == input.RequestItems ||
                    this.RequestItems != null &&
                    this.RequestItems.SequenceEqual(input.RequestItems)
                ) && 
                (
                    this.DetectionLevel == input.DetectionLevel ||
                    (this.DetectionLevel != null &&
                    this.DetectionLevel.Equals(input.DetectionLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestItems != null)
                    hashCode = hashCode * 59 + this.RequestItems.GetHashCode();
                if (this.DetectionLevel != null)
                    hashCode = hashCode * 59 + this.DetectionLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
