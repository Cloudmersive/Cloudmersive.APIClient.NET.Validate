/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.Validate.Client;
using Cloudmersive.APIClient.NET.Validate.Model;

namespace Cloudmersive.APIClient.NET.Validate.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDomainApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Validate a domain name
        /// </summary>
        /// <remarks>
        /// Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>CheckResponse</returns>
        CheckResponse DomainCheck (string domain);

        /// <summary>
        /// Validate a domain name
        /// </summary>
        /// <remarks>
        /// Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of CheckResponse</returns>
        ApiResponse<CheckResponse> DomainCheckWithHttpInfo (string domain);
        /// <summary>
        /// Get top-level domain name from URL
        /// </summary>
        /// <remarks>
        /// Gets the top-level domain name from a URL, such as mydomain.com.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>ValidateUrlResponseSyntaxOnly</returns>
        ValidateUrlResponseSyntaxOnly DomainGetTopLevelDomainFromUrl (ValidateUrlRequestSyntaxOnly request);

        /// <summary>
        /// Get top-level domain name from URL
        /// </summary>
        /// <remarks>
        /// Gets the top-level domain name from a URL, such as mydomain.com.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>ApiResponse of ValidateUrlResponseSyntaxOnly</returns>
        ApiResponse<ValidateUrlResponseSyntaxOnly> DomainGetTopLevelDomainFromUrlWithHttpInfo (ValidateUrlRequestSyntaxOnly request);
        /// <summary>
        /// Check if path is a high-risk server administration path
        /// </summary>
        /// <remarks>
        /// Check if the input URL or relative path is a server Administration Path, and therefore a risk for remote access.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">URL or relative path to check, e.g. \&quot;/admin/login\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>IsAdminPathResponse</returns>
        IsAdminPathResponse DomainIsAdminPath (string value);

        /// <summary>
        /// Check if path is a high-risk server administration path
        /// </summary>
        /// <remarks>
        /// Check if the input URL or relative path is a server Administration Path, and therefore a risk for remote access.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">URL or relative path to check, e.g. \&quot;/admin/login\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of IsAdminPathResponse</returns>
        ApiResponse<IsAdminPathResponse> DomainIsAdminPathWithHttpInfo (string value);
        /// <summary>
        /// Check a URL for Phishing threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being an Phishing (fake login page, or other page designed to collect information via social engineering) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>PhishingCheckResponse</returns>
        PhishingCheckResponse DomainPhishingCheck (PhishingCheckRequest request);

        /// <summary>
        /// Check a URL for Phishing threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being an Phishing (fake login page, or other page designed to collect information via social engineering) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>ApiResponse of PhishingCheckResponse</returns>
        ApiResponse<PhishingCheckResponse> DomainPhishingCheckWithHttpInfo (PhishingCheckRequest request);
        /// <summary>
        /// Get WHOIS information for a domain
        /// </summary>
        /// <remarks>
        /// Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain&#39;s owners.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.   The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>WhoisResponse</returns>
        WhoisResponse DomainPost (string domain);

        /// <summary>
        /// Get WHOIS information for a domain
        /// </summary>
        /// <remarks>
        /// Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain&#39;s owners.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.   The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of WhoisResponse</returns>
        ApiResponse<WhoisResponse> DomainPostWithHttpInfo (string domain);
        /// <summary>
        /// Validate a domain name&#39;s quality score
        /// </summary>
        /// <remarks>
        /// Check the quality of a domain name.  Supports over 9 million domain names.  Higher quality scores indicate more trust and authority in the domain name, with values ranging from 0.0 (low quality) to 10.0 (maximum quality).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.</param>
        /// <returns>DomainQualityResponse</returns>
        DomainQualityResponse DomainQualityScore (string domain);

        /// <summary>
        /// Validate a domain name&#39;s quality score
        /// </summary>
        /// <remarks>
        /// Check the quality of a domain name.  Supports over 9 million domain names.  Higher quality scores indicate more trust and authority in the domain name, with values ranging from 0.0 (low quality) to 10.0 (maximum quality).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.</param>
        /// <returns>ApiResponse of DomainQualityResponse</returns>
        ApiResponse<DomainQualityResponse> DomainQualityScoreWithHttpInfo (string domain);
        /// <summary>
        /// Check a URL for safety threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being a safety threat through malware, unwanted software, or social engineering threats.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>UrlSafetyCheckResponseFull</returns>
        UrlSafetyCheckResponseFull DomainSafetyCheck (UrlSafetyCheckRequestFull request);

        /// <summary>
        /// Check a URL for safety threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being a safety threat through malware, unwanted software, or social engineering threats.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>ApiResponse of UrlSafetyCheckResponseFull</returns>
        ApiResponse<UrlSafetyCheckResponseFull> DomainSafetyCheckWithHttpInfo (UrlSafetyCheckRequestFull request);
        /// <summary>
        /// Check a URL for SSRF threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>UrlSsrfResponseFull</returns>
        UrlSsrfResponseFull DomainSsrfCheck (UrlSsrfRequestFull request);

        /// <summary>
        /// Check a URL for SSRF threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>ApiResponse of UrlSsrfResponseFull</returns>
        ApiResponse<UrlSsrfResponseFull> DomainSsrfCheckWithHttpInfo (UrlSsrfRequestFull request);
        /// <summary>
        /// Check a URL for SSRF threats in batches
        /// </summary>
        /// <remarks>
        /// Batch-checks if input URLs are at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request as a batch of multiple URLs</param>
        /// <returns>UrlSsrfResponseBatch</returns>
        UrlSsrfResponseBatch DomainSsrfCheckBatch (UrlSsrfRequestBatch request);

        /// <summary>
        /// Check a URL for SSRF threats in batches
        /// </summary>
        /// <remarks>
        /// Batch-checks if input URLs are at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request as a batch of multiple URLs</param>
        /// <returns>ApiResponse of UrlSsrfResponseBatch</returns>
        ApiResponse<UrlSsrfResponseBatch> DomainSsrfCheckBatchWithHttpInfo (UrlSsrfRequestBatch request);
        /// <summary>
        /// Validate a URL fully
        /// </summary>
        /// <remarks>
        /// Validate whether a URL is syntactically valid (does not check endpoint for validity), whether it exists, and whether the endpoint is up and passes virus scan checks.  Accepts various types of input and produces a well-formed URL as output.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>ValidateUrlResponseFull</returns>
        ValidateUrlResponseFull DomainUrlFull (ValidateUrlRequestFull request);

        /// <summary>
        /// Validate a URL fully
        /// </summary>
        /// <remarks>
        /// Validate whether a URL is syntactically valid (does not check endpoint for validity), whether it exists, and whether the endpoint is up and passes virus scan checks.  Accepts various types of input and produces a well-formed URL as output.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>ApiResponse of ValidateUrlResponseFull</returns>
        ApiResponse<ValidateUrlResponseFull> DomainUrlFullWithHttpInfo (ValidateUrlRequestFull request);
        /// <summary>
        /// Validate a URL syntactically
        /// </summary>
        /// <remarks>
        /// Validate whether a URL is syntactically valid (does not check endpoint for validity).  Accepts various types of input and produces a well-formed URL as output.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>ValidateUrlResponseSyntaxOnly</returns>
        ValidateUrlResponseSyntaxOnly DomainUrlSyntaxOnly (ValidateUrlRequestSyntaxOnly request);

        /// <summary>
        /// Validate a URL syntactically
        /// </summary>
        /// <remarks>
        /// Validate whether a URL is syntactically valid (does not check endpoint for validity).  Accepts various types of input and produces a well-formed URL as output.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>ApiResponse of ValidateUrlResponseSyntaxOnly</returns>
        ApiResponse<ValidateUrlResponseSyntaxOnly> DomainUrlSyntaxOnlyWithHttpInfo (ValidateUrlRequestSyntaxOnly request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Validate a domain name
        /// </summary>
        /// <remarks>
        /// Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of CheckResponse</returns>
        System.Threading.Tasks.Task<CheckResponse> DomainCheckAsync (string domain);

        /// <summary>
        /// Validate a domain name
        /// </summary>
        /// <remarks>
        /// Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (CheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckResponse>> DomainCheckAsyncWithHttpInfo (string domain);
        /// <summary>
        /// Get top-level domain name from URL
        /// </summary>
        /// <remarks>
        /// Gets the top-level domain name from a URL, such as mydomain.com.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>Task of ValidateUrlResponseSyntaxOnly</returns>
        System.Threading.Tasks.Task<ValidateUrlResponseSyntaxOnly> DomainGetTopLevelDomainFromUrlAsync (ValidateUrlRequestSyntaxOnly request);

        /// <summary>
        /// Get top-level domain name from URL
        /// </summary>
        /// <remarks>
        /// Gets the top-level domain name from a URL, such as mydomain.com.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>Task of ApiResponse (ValidateUrlResponseSyntaxOnly)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateUrlResponseSyntaxOnly>> DomainGetTopLevelDomainFromUrlAsyncWithHttpInfo (ValidateUrlRequestSyntaxOnly request);
        /// <summary>
        /// Check if path is a high-risk server administration path
        /// </summary>
        /// <remarks>
        /// Check if the input URL or relative path is a server Administration Path, and therefore a risk for remote access.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">URL or relative path to check, e.g. \&quot;/admin/login\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of IsAdminPathResponse</returns>
        System.Threading.Tasks.Task<IsAdminPathResponse> DomainIsAdminPathAsync (string value);

        /// <summary>
        /// Check if path is a high-risk server administration path
        /// </summary>
        /// <remarks>
        /// Check if the input URL or relative path is a server Administration Path, and therefore a risk for remote access.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">URL or relative path to check, e.g. \&quot;/admin/login\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (IsAdminPathResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IsAdminPathResponse>> DomainIsAdminPathAsyncWithHttpInfo (string value);
        /// <summary>
        /// Check a URL for Phishing threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being an Phishing (fake login page, or other page designed to collect information via social engineering) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of PhishingCheckResponse</returns>
        System.Threading.Tasks.Task<PhishingCheckResponse> DomainPhishingCheckAsync (PhishingCheckRequest request);

        /// <summary>
        /// Check a URL for Phishing threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being an Phishing (fake login page, or other page designed to collect information via social engineering) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of ApiResponse (PhishingCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhishingCheckResponse>> DomainPhishingCheckAsyncWithHttpInfo (PhishingCheckRequest request);
        /// <summary>
        /// Get WHOIS information for a domain
        /// </summary>
        /// <remarks>
        /// Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain&#39;s owners.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.   The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of WhoisResponse</returns>
        System.Threading.Tasks.Task<WhoisResponse> DomainPostAsync (string domain);

        /// <summary>
        /// Get WHOIS information for a domain
        /// </summary>
        /// <remarks>
        /// Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain&#39;s owners.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.   The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (WhoisResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WhoisResponse>> DomainPostAsyncWithHttpInfo (string domain);
        /// <summary>
        /// Validate a domain name&#39;s quality score
        /// </summary>
        /// <remarks>
        /// Check the quality of a domain name.  Supports over 9 million domain names.  Higher quality scores indicate more trust and authority in the domain name, with values ranging from 0.0 (low quality) to 10.0 (maximum quality).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.</param>
        /// <returns>Task of DomainQualityResponse</returns>
        System.Threading.Tasks.Task<DomainQualityResponse> DomainQualityScoreAsync (string domain);

        /// <summary>
        /// Validate a domain name&#39;s quality score
        /// </summary>
        /// <remarks>
        /// Check the quality of a domain name.  Supports over 9 million domain names.  Higher quality scores indicate more trust and authority in the domain name, with values ranging from 0.0 (low quality) to 10.0 (maximum quality).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.</param>
        /// <returns>Task of ApiResponse (DomainQualityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainQualityResponse>> DomainQualityScoreAsyncWithHttpInfo (string domain);
        /// <summary>
        /// Check a URL for safety threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being a safety threat through malware, unwanted software, or social engineering threats.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of UrlSafetyCheckResponseFull</returns>
        System.Threading.Tasks.Task<UrlSafetyCheckResponseFull> DomainSafetyCheckAsync (UrlSafetyCheckRequestFull request);

        /// <summary>
        /// Check a URL for safety threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being a safety threat through malware, unwanted software, or social engineering threats.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of ApiResponse (UrlSafetyCheckResponseFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlSafetyCheckResponseFull>> DomainSafetyCheckAsyncWithHttpInfo (UrlSafetyCheckRequestFull request);
        /// <summary>
        /// Check a URL for SSRF threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of UrlSsrfResponseFull</returns>
        System.Threading.Tasks.Task<UrlSsrfResponseFull> DomainSsrfCheckAsync (UrlSsrfRequestFull request);

        /// <summary>
        /// Check a URL for SSRF threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of ApiResponse (UrlSsrfResponseFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlSsrfResponseFull>> DomainSsrfCheckAsyncWithHttpInfo (UrlSsrfRequestFull request);
        /// <summary>
        /// Check a URL for SSRF threats in batches
        /// </summary>
        /// <remarks>
        /// Batch-checks if input URLs are at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request as a batch of multiple URLs</param>
        /// <returns>Task of UrlSsrfResponseBatch</returns>
        System.Threading.Tasks.Task<UrlSsrfResponseBatch> DomainSsrfCheckBatchAsync (UrlSsrfRequestBatch request);

        /// <summary>
        /// Check a URL for SSRF threats in batches
        /// </summary>
        /// <remarks>
        /// Batch-checks if input URLs are at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request as a batch of multiple URLs</param>
        /// <returns>Task of ApiResponse (UrlSsrfResponseBatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlSsrfResponseBatch>> DomainSsrfCheckBatchAsyncWithHttpInfo (UrlSsrfRequestBatch request);
        /// <summary>
        /// Validate a URL fully
        /// </summary>
        /// <remarks>
        /// Validate whether a URL is syntactically valid (does not check endpoint for validity), whether it exists, and whether the endpoint is up and passes virus scan checks.  Accepts various types of input and produces a well-formed URL as output.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of ValidateUrlResponseFull</returns>
        System.Threading.Tasks.Task<ValidateUrlResponseFull> DomainUrlFullAsync (ValidateUrlRequestFull request);

        /// <summary>
        /// Validate a URL fully
        /// </summary>
        /// <remarks>
        /// Validate whether a URL is syntactically valid (does not check endpoint for validity), whether it exists, and whether the endpoint is up and passes virus scan checks.  Accepts various types of input and produces a well-formed URL as output.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of ApiResponse (ValidateUrlResponseFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateUrlResponseFull>> DomainUrlFullAsyncWithHttpInfo (ValidateUrlRequestFull request);
        /// <summary>
        /// Validate a URL syntactically
        /// </summary>
        /// <remarks>
        /// Validate whether a URL is syntactically valid (does not check endpoint for validity).  Accepts various types of input and produces a well-formed URL as output.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>Task of ValidateUrlResponseSyntaxOnly</returns>
        System.Threading.Tasks.Task<ValidateUrlResponseSyntaxOnly> DomainUrlSyntaxOnlyAsync (ValidateUrlRequestSyntaxOnly request);

        /// <summary>
        /// Validate a URL syntactically
        /// </summary>
        /// <remarks>
        /// Validate whether a URL is syntactically valid (does not check endpoint for validity).  Accepts various types of input and produces a well-formed URL as output.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>Task of ApiResponse (ValidateUrlResponseSyntaxOnly)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateUrlResponseSyntaxOnly>> DomainUrlSyntaxOnlyAsyncWithHttpInfo (ValidateUrlRequestSyntaxOnly request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DomainApi : IDomainApi
    {
        private Cloudmersive.APIClient.NET.Validate.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DomainApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.Validate.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.Validate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DomainApi(Cloudmersive.APIClient.NET.Validate.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.Validate.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.Validate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.Validate.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.Validate.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Validate a domain name Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>CheckResponse</returns>
        public CheckResponse DomainCheck (string domain)
        {
             ApiResponse<CheckResponse> localVarResponse = DomainCheckWithHttpInfo(domain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a domain name Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of CheckResponse</returns>
        public ApiResponse< CheckResponse > DomainCheckWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling DomainApi->DomainCheck");

            var localVarPath = "/validate/domain/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null && domain.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(domain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = domain; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CheckResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckResponse)));
        }

        /// <summary>
        /// Validate a domain name Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of CheckResponse</returns>
        public async System.Threading.Tasks.Task<CheckResponse> DomainCheckAsync (string domain)
        {
             ApiResponse<CheckResponse> localVarResponse = await DomainCheckAsyncWithHttpInfo(domain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate a domain name Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (CheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CheckResponse>> DomainCheckAsyncWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling DomainApi->DomainCheck");

            var localVarPath = "/validate/domain/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null && domain.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(domain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = domain; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CheckResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckResponse)));
        }

        /// <summary>
        /// Get top-level domain name from URL Gets the top-level domain name from a URL, such as mydomain.com.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>ValidateUrlResponseSyntaxOnly</returns>
        public ValidateUrlResponseSyntaxOnly DomainGetTopLevelDomainFromUrl (ValidateUrlRequestSyntaxOnly request)
        {
             ApiResponse<ValidateUrlResponseSyntaxOnly> localVarResponse = DomainGetTopLevelDomainFromUrlWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get top-level domain name from URL Gets the top-level domain name from a URL, such as mydomain.com.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>ApiResponse of ValidateUrlResponseSyntaxOnly</returns>
        public ApiResponse< ValidateUrlResponseSyntaxOnly > DomainGetTopLevelDomainFromUrlWithHttpInfo (ValidateUrlRequestSyntaxOnly request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling DomainApi->DomainGetTopLevelDomainFromUrl");

            var localVarPath = "/validate/domain/url/get-top-level-domain";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainGetTopLevelDomainFromUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateUrlResponseSyntaxOnly>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateUrlResponseSyntaxOnly) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateUrlResponseSyntaxOnly)));
        }

        /// <summary>
        /// Get top-level domain name from URL Gets the top-level domain name from a URL, such as mydomain.com.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>Task of ValidateUrlResponseSyntaxOnly</returns>
        public async System.Threading.Tasks.Task<ValidateUrlResponseSyntaxOnly> DomainGetTopLevelDomainFromUrlAsync (ValidateUrlRequestSyntaxOnly request)
        {
             ApiResponse<ValidateUrlResponseSyntaxOnly> localVarResponse = await DomainGetTopLevelDomainFromUrlAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get top-level domain name from URL Gets the top-level domain name from a URL, such as mydomain.com.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>Task of ApiResponse (ValidateUrlResponseSyntaxOnly)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateUrlResponseSyntaxOnly>> DomainGetTopLevelDomainFromUrlAsyncWithHttpInfo (ValidateUrlRequestSyntaxOnly request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling DomainApi->DomainGetTopLevelDomainFromUrl");

            var localVarPath = "/validate/domain/url/get-top-level-domain";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainGetTopLevelDomainFromUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateUrlResponseSyntaxOnly>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateUrlResponseSyntaxOnly) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateUrlResponseSyntaxOnly)));
        }

        /// <summary>
        /// Check if path is a high-risk server administration path Check if the input URL or relative path is a server Administration Path, and therefore a risk for remote access.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">URL or relative path to check, e.g. \&quot;/admin/login\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>IsAdminPathResponse</returns>
        public IsAdminPathResponse DomainIsAdminPath (string value)
        {
             ApiResponse<IsAdminPathResponse> localVarResponse = DomainIsAdminPathWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if path is a high-risk server administration path Check if the input URL or relative path is a server Administration Path, and therefore a risk for remote access.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">URL or relative path to check, e.g. \&quot;/admin/login\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of IsAdminPathResponse</returns>
        public ApiResponse< IsAdminPathResponse > DomainIsAdminPathWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling DomainApi->DomainIsAdminPath");

            var localVarPath = "/validate/domain/url/is-admin-path";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainIsAdminPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IsAdminPathResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IsAdminPathResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IsAdminPathResponse)));
        }

        /// <summary>
        /// Check if path is a high-risk server administration path Check if the input URL or relative path is a server Administration Path, and therefore a risk for remote access.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">URL or relative path to check, e.g. \&quot;/admin/login\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of IsAdminPathResponse</returns>
        public async System.Threading.Tasks.Task<IsAdminPathResponse> DomainIsAdminPathAsync (string value)
        {
             ApiResponse<IsAdminPathResponse> localVarResponse = await DomainIsAdminPathAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if path is a high-risk server administration path Check if the input URL or relative path is a server Administration Path, and therefore a risk for remote access.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">URL or relative path to check, e.g. \&quot;/admin/login\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (IsAdminPathResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IsAdminPathResponse>> DomainIsAdminPathAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling DomainApi->DomainIsAdminPath");

            var localVarPath = "/validate/domain/url/is-admin-path";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainIsAdminPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IsAdminPathResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IsAdminPathResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IsAdminPathResponse)));
        }

        /// <summary>
        /// Check a URL for Phishing threats Checks if an input URL is at risk of being an Phishing (fake login page, or other page designed to collect information via social engineering) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>PhishingCheckResponse</returns>
        public PhishingCheckResponse DomainPhishingCheck (PhishingCheckRequest request)
        {
             ApiResponse<PhishingCheckResponse> localVarResponse = DomainPhishingCheckWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check a URL for Phishing threats Checks if an input URL is at risk of being an Phishing (fake login page, or other page designed to collect information via social engineering) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>ApiResponse of PhishingCheckResponse</returns>
        public ApiResponse< PhishingCheckResponse > DomainPhishingCheckWithHttpInfo (PhishingCheckRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling DomainApi->DomainPhishingCheck");

            var localVarPath = "/validate/domain/url/phishing-threat-check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainPhishingCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhishingCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhishingCheckResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhishingCheckResponse)));
        }

        /// <summary>
        /// Check a URL for Phishing threats Checks if an input URL is at risk of being an Phishing (fake login page, or other page designed to collect information via social engineering) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of PhishingCheckResponse</returns>
        public async System.Threading.Tasks.Task<PhishingCheckResponse> DomainPhishingCheckAsync (PhishingCheckRequest request)
        {
             ApiResponse<PhishingCheckResponse> localVarResponse = await DomainPhishingCheckAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check a URL for Phishing threats Checks if an input URL is at risk of being an Phishing (fake login page, or other page designed to collect information via social engineering) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of ApiResponse (PhishingCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PhishingCheckResponse>> DomainPhishingCheckAsyncWithHttpInfo (PhishingCheckRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling DomainApi->DomainPhishingCheck");

            var localVarPath = "/validate/domain/url/phishing-threat-check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainPhishingCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhishingCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhishingCheckResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhishingCheckResponse)));
        }

        /// <summary>
        /// Get WHOIS information for a domain Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain&#39;s owners.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.   The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>WhoisResponse</returns>
        public WhoisResponse DomainPost (string domain)
        {
             ApiResponse<WhoisResponse> localVarResponse = DomainPostWithHttpInfo(domain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get WHOIS information for a domain Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain&#39;s owners.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.   The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of WhoisResponse</returns>
        public ApiResponse< WhoisResponse > DomainPostWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling DomainApi->DomainPost");

            var localVarPath = "/validate/domain/whois";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null && domain.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(domain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = domain; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WhoisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WhoisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WhoisResponse)));
        }

        /// <summary>
        /// Get WHOIS information for a domain Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain&#39;s owners.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.   The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of WhoisResponse</returns>
        public async System.Threading.Tasks.Task<WhoisResponse> DomainPostAsync (string domain)
        {
             ApiResponse<WhoisResponse> localVarResponse = await DomainPostAsyncWithHttpInfo(domain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get WHOIS information for a domain Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain&#39;s owners.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.   The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (WhoisResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WhoisResponse>> DomainPostAsyncWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling DomainApi->DomainPost");

            var localVarPath = "/validate/domain/whois";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null && domain.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(domain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = domain; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WhoisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WhoisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WhoisResponse)));
        }

        /// <summary>
        /// Validate a domain name&#39;s quality score Check the quality of a domain name.  Supports over 9 million domain names.  Higher quality scores indicate more trust and authority in the domain name, with values ranging from 0.0 (low quality) to 10.0 (maximum quality).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.</param>
        /// <returns>DomainQualityResponse</returns>
        public DomainQualityResponse DomainQualityScore (string domain)
        {
             ApiResponse<DomainQualityResponse> localVarResponse = DomainQualityScoreWithHttpInfo(domain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a domain name&#39;s quality score Check the quality of a domain name.  Supports over 9 million domain names.  Higher quality scores indicate more trust and authority in the domain name, with values ranging from 0.0 (low quality) to 10.0 (maximum quality).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.</param>
        /// <returns>ApiResponse of DomainQualityResponse</returns>
        public ApiResponse< DomainQualityResponse > DomainQualityScoreWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling DomainApi->DomainQualityScore");

            var localVarPath = "/validate/domain/quality-score";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null && domain.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(domain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = domain; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainQualityScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DomainQualityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DomainQualityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DomainQualityResponse)));
        }

        /// <summary>
        /// Validate a domain name&#39;s quality score Check the quality of a domain name.  Supports over 9 million domain names.  Higher quality scores indicate more trust and authority in the domain name, with values ranging from 0.0 (low quality) to 10.0 (maximum quality).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.</param>
        /// <returns>Task of DomainQualityResponse</returns>
        public async System.Threading.Tasks.Task<DomainQualityResponse> DomainQualityScoreAsync (string domain)
        {
             ApiResponse<DomainQualityResponse> localVarResponse = await DomainQualityScoreAsyncWithHttpInfo(domain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate a domain name&#39;s quality score Check the quality of a domain name.  Supports over 9 million domain names.  Higher quality scores indicate more trust and authority in the domain name, with values ranging from 0.0 (low quality) to 10.0 (maximum quality).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.</param>
        /// <returns>Task of ApiResponse (DomainQualityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DomainQualityResponse>> DomainQualityScoreAsyncWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling DomainApi->DomainQualityScore");

            var localVarPath = "/validate/domain/quality-score";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null && domain.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(domain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = domain; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainQualityScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DomainQualityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DomainQualityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DomainQualityResponse)));
        }

        /// <summary>
        /// Check a URL for safety threats Checks if an input URL is at risk of being a safety threat through malware, unwanted software, or social engineering threats.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>UrlSafetyCheckResponseFull</returns>
        public UrlSafetyCheckResponseFull DomainSafetyCheck (UrlSafetyCheckRequestFull request)
        {
             ApiResponse<UrlSafetyCheckResponseFull> localVarResponse = DomainSafetyCheckWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check a URL for safety threats Checks if an input URL is at risk of being a safety threat through malware, unwanted software, or social engineering threats.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>ApiResponse of UrlSafetyCheckResponseFull</returns>
        public ApiResponse< UrlSafetyCheckResponseFull > DomainSafetyCheckWithHttpInfo (UrlSafetyCheckRequestFull request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling DomainApi->DomainSafetyCheck");

            var localVarPath = "/validate/domain/url/safety-threat-check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainSafetyCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UrlSafetyCheckResponseFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UrlSafetyCheckResponseFull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UrlSafetyCheckResponseFull)));
        }

        /// <summary>
        /// Check a URL for safety threats Checks if an input URL is at risk of being a safety threat through malware, unwanted software, or social engineering threats.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of UrlSafetyCheckResponseFull</returns>
        public async System.Threading.Tasks.Task<UrlSafetyCheckResponseFull> DomainSafetyCheckAsync (UrlSafetyCheckRequestFull request)
        {
             ApiResponse<UrlSafetyCheckResponseFull> localVarResponse = await DomainSafetyCheckAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check a URL for safety threats Checks if an input URL is at risk of being a safety threat through malware, unwanted software, or social engineering threats.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of ApiResponse (UrlSafetyCheckResponseFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UrlSafetyCheckResponseFull>> DomainSafetyCheckAsyncWithHttpInfo (UrlSafetyCheckRequestFull request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling DomainApi->DomainSafetyCheck");

            var localVarPath = "/validate/domain/url/safety-threat-check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainSafetyCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UrlSafetyCheckResponseFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UrlSafetyCheckResponseFull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UrlSafetyCheckResponseFull)));
        }

        /// <summary>
        /// Check a URL for SSRF threats Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>UrlSsrfResponseFull</returns>
        public UrlSsrfResponseFull DomainSsrfCheck (UrlSsrfRequestFull request)
        {
             ApiResponse<UrlSsrfResponseFull> localVarResponse = DomainSsrfCheckWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check a URL for SSRF threats Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>ApiResponse of UrlSsrfResponseFull</returns>
        public ApiResponse< UrlSsrfResponseFull > DomainSsrfCheckWithHttpInfo (UrlSsrfRequestFull request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling DomainApi->DomainSsrfCheck");

            var localVarPath = "/validate/domain/url/ssrf-threat-check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainSsrfCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UrlSsrfResponseFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UrlSsrfResponseFull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UrlSsrfResponseFull)));
        }

        /// <summary>
        /// Check a URL for SSRF threats Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of UrlSsrfResponseFull</returns>
        public async System.Threading.Tasks.Task<UrlSsrfResponseFull> DomainSsrfCheckAsync (UrlSsrfRequestFull request)
        {
             ApiResponse<UrlSsrfResponseFull> localVarResponse = await DomainSsrfCheckAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check a URL for SSRF threats Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of ApiResponse (UrlSsrfResponseFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UrlSsrfResponseFull>> DomainSsrfCheckAsyncWithHttpInfo (UrlSsrfRequestFull request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling DomainApi->DomainSsrfCheck");

            var localVarPath = "/validate/domain/url/ssrf-threat-check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainSsrfCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UrlSsrfResponseFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UrlSsrfResponseFull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UrlSsrfResponseFull)));
        }

        /// <summary>
        /// Check a URL for SSRF threats in batches Batch-checks if input URLs are at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request as a batch of multiple URLs</param>
        /// <returns>UrlSsrfResponseBatch</returns>
        public UrlSsrfResponseBatch DomainSsrfCheckBatch (UrlSsrfRequestBatch request)
        {
             ApiResponse<UrlSsrfResponseBatch> localVarResponse = DomainSsrfCheckBatchWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check a URL for SSRF threats in batches Batch-checks if input URLs are at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request as a batch of multiple URLs</param>
        /// <returns>ApiResponse of UrlSsrfResponseBatch</returns>
        public ApiResponse< UrlSsrfResponseBatch > DomainSsrfCheckBatchWithHttpInfo (UrlSsrfRequestBatch request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling DomainApi->DomainSsrfCheckBatch");

            var localVarPath = "/validate/domain/url/ssrf-threat-check/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainSsrfCheckBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UrlSsrfResponseBatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UrlSsrfResponseBatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UrlSsrfResponseBatch)));
        }

        /// <summary>
        /// Check a URL for SSRF threats in batches Batch-checks if input URLs are at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request as a batch of multiple URLs</param>
        /// <returns>Task of UrlSsrfResponseBatch</returns>
        public async System.Threading.Tasks.Task<UrlSsrfResponseBatch> DomainSsrfCheckBatchAsync (UrlSsrfRequestBatch request)
        {
             ApiResponse<UrlSsrfResponseBatch> localVarResponse = await DomainSsrfCheckBatchAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check a URL for SSRF threats in batches Batch-checks if input URLs are at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request as a batch of multiple URLs</param>
        /// <returns>Task of ApiResponse (UrlSsrfResponseBatch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UrlSsrfResponseBatch>> DomainSsrfCheckBatchAsyncWithHttpInfo (UrlSsrfRequestBatch request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling DomainApi->DomainSsrfCheckBatch");

            var localVarPath = "/validate/domain/url/ssrf-threat-check/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainSsrfCheckBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UrlSsrfResponseBatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UrlSsrfResponseBatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UrlSsrfResponseBatch)));
        }

        /// <summary>
        /// Validate a URL fully Validate whether a URL is syntactically valid (does not check endpoint for validity), whether it exists, and whether the endpoint is up and passes virus scan checks.  Accepts various types of input and produces a well-formed URL as output.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>ValidateUrlResponseFull</returns>
        public ValidateUrlResponseFull DomainUrlFull (ValidateUrlRequestFull request)
        {
             ApiResponse<ValidateUrlResponseFull> localVarResponse = DomainUrlFullWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a URL fully Validate whether a URL is syntactically valid (does not check endpoint for validity), whether it exists, and whether the endpoint is up and passes virus scan checks.  Accepts various types of input and produces a well-formed URL as output.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>ApiResponse of ValidateUrlResponseFull</returns>
        public ApiResponse< ValidateUrlResponseFull > DomainUrlFullWithHttpInfo (ValidateUrlRequestFull request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling DomainApi->DomainUrlFull");

            var localVarPath = "/validate/domain/url/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainUrlFull", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateUrlResponseFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateUrlResponseFull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateUrlResponseFull)));
        }

        /// <summary>
        /// Validate a URL fully Validate whether a URL is syntactically valid (does not check endpoint for validity), whether it exists, and whether the endpoint is up and passes virus scan checks.  Accepts various types of input and produces a well-formed URL as output.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of ValidateUrlResponseFull</returns>
        public async System.Threading.Tasks.Task<ValidateUrlResponseFull> DomainUrlFullAsync (ValidateUrlRequestFull request)
        {
             ApiResponse<ValidateUrlResponseFull> localVarResponse = await DomainUrlFullAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate a URL fully Validate whether a URL is syntactically valid (does not check endpoint for validity), whether it exists, and whether the endpoint is up and passes virus scan checks.  Accepts various types of input and produces a well-formed URL as output.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of ApiResponse (ValidateUrlResponseFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateUrlResponseFull>> DomainUrlFullAsyncWithHttpInfo (ValidateUrlRequestFull request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling DomainApi->DomainUrlFull");

            var localVarPath = "/validate/domain/url/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainUrlFull", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateUrlResponseFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateUrlResponseFull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateUrlResponseFull)));
        }

        /// <summary>
        /// Validate a URL syntactically Validate whether a URL is syntactically valid (does not check endpoint for validity).  Accepts various types of input and produces a well-formed URL as output.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>ValidateUrlResponseSyntaxOnly</returns>
        public ValidateUrlResponseSyntaxOnly DomainUrlSyntaxOnly (ValidateUrlRequestSyntaxOnly request)
        {
             ApiResponse<ValidateUrlResponseSyntaxOnly> localVarResponse = DomainUrlSyntaxOnlyWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a URL syntactically Validate whether a URL is syntactically valid (does not check endpoint for validity).  Accepts various types of input and produces a well-formed URL as output.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>ApiResponse of ValidateUrlResponseSyntaxOnly</returns>
        public ApiResponse< ValidateUrlResponseSyntaxOnly > DomainUrlSyntaxOnlyWithHttpInfo (ValidateUrlRequestSyntaxOnly request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling DomainApi->DomainUrlSyntaxOnly");

            var localVarPath = "/validate/domain/url/syntax-only";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainUrlSyntaxOnly", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateUrlResponseSyntaxOnly>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateUrlResponseSyntaxOnly) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateUrlResponseSyntaxOnly)));
        }

        /// <summary>
        /// Validate a URL syntactically Validate whether a URL is syntactically valid (does not check endpoint for validity).  Accepts various types of input and produces a well-formed URL as output.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>Task of ValidateUrlResponseSyntaxOnly</returns>
        public async System.Threading.Tasks.Task<ValidateUrlResponseSyntaxOnly> DomainUrlSyntaxOnlyAsync (ValidateUrlRequestSyntaxOnly request)
        {
             ApiResponse<ValidateUrlResponseSyntaxOnly> localVarResponse = await DomainUrlSyntaxOnlyAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate a URL syntactically Validate whether a URL is syntactically valid (does not check endpoint for validity).  Accepts various types of input and produces a well-formed URL as output.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL information</param>
        /// <returns>Task of ApiResponse (ValidateUrlResponseSyntaxOnly)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateUrlResponseSyntaxOnly>> DomainUrlSyntaxOnlyAsyncWithHttpInfo (ValidateUrlRequestSyntaxOnly request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling DomainApi->DomainUrlSyntaxOnly");

            var localVarPath = "/validate/domain/url/syntax-only";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainUrlSyntaxOnly", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateUrlResponseSyntaxOnly>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateUrlResponseSyntaxOnly) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateUrlResponseSyntaxOnly)));
        }

    }
}
