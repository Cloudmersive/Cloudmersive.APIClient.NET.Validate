/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.Validate.Client;
using Cloudmersive.APIClient.NET.Validate.Model;

namespace Cloudmersive.APIClient.NET.Validate.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITextInputApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks
        /// </summary>
        /// <remarks>
        /// Detects SQL Injection (SQLI) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="detectionLevel">Set to Normal to target a high-security SQL Injection detection level with a very low false positive rate; select High to target a very-high security SQL Injection detection level with higher false positives.  Default is Normal (recommended). (optional)</param>
        /// <returns>SqlInjectionDetectionResult</returns>
        SqlInjectionDetectionResult TextInputCheckSqlInjection (string value, string detectionLevel = null);

        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks
        /// </summary>
        /// <remarks>
        /// Detects SQL Injection (SQLI) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="detectionLevel">Set to Normal to target a high-security SQL Injection detection level with a very low false positive rate; select High to target a very-high security SQL Injection detection level with higher false positives.  Default is Normal (recommended). (optional)</param>
        /// <returns>ApiResponse of SqlInjectionDetectionResult</returns>
        ApiResponse<SqlInjectionDetectionResult> TextInputCheckSqlInjectionWithHttpInfo (string value, string detectionLevel = null);
        /// <summary>
        /// Check and protect multiple text inputs for SQL Injection (SQLI) attacks in batch
        /// </summary>
        /// <remarks>
        /// Detects SQL Injection (SQLI) attacks from multiple text inputs.  Output preverses order of input items.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>SqlInjectionCheckBatchResponse</returns>
        SqlInjectionCheckBatchResponse TextInputCheckSqlInjectionBatch (SqlInjectionCheckBatchRequest value);

        /// <summary>
        /// Check and protect multiple text inputs for SQL Injection (SQLI) attacks in batch
        /// </summary>
        /// <remarks>
        /// Detects SQL Injection (SQLI) attacks from multiple text inputs.  Output preverses order of input items.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of SqlInjectionCheckBatchResponse</returns>
        ApiResponse<SqlInjectionCheckBatchResponse> TextInputCheckSqlInjectionBatchWithHttpInfo (SqlInjectionCheckBatchRequest value);
        /// <summary>
        /// Check text input for Cross-Site-Scripting (XSS) attacks
        /// </summary>
        /// <remarks>
        /// Detects XSS (Cross-Site-Scripting) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>XssProtectionResult</returns>
        XssProtectionResult TextInputCheckXss (string value);

        /// <summary>
        /// Check text input for Cross-Site-Scripting (XSS) attacks
        /// </summary>
        /// <remarks>
        /// Detects XSS (Cross-Site-Scripting) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of XssProtectionResult</returns>
        ApiResponse<XssProtectionResult> TextInputCheckXssWithHttpInfo (string value);
        /// <summary>
        /// Check and protect multiple text inputs for Cross-Site-Scripting (XSS) attacks in batch
        /// </summary>
        /// <remarks>
        /// Detects XSS (Cross-Site-Scripting) attacks from multiple text inputs.  Output preverses order of input items.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>XssProtectionBatchResponse</returns>
        XssProtectionBatchResponse TextInputCheckXssBatch (XssProtectionBatchRequest value);

        /// <summary>
        /// Check and protect multiple text inputs for Cross-Site-Scripting (XSS) attacks in batch
        /// </summary>
        /// <remarks>
        /// Detects XSS (Cross-Site-Scripting) attacks from multiple text inputs.  Output preverses order of input items.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of XssProtectionBatchResponse</returns>
        ApiResponse<XssProtectionBatchResponse> TextInputCheckXssBatchWithHttpInfo (XssProtectionBatchRequest value);
        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks
        /// </summary>
        /// <remarks>
        /// Detects XXE (XML External Entity) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="allowInternetUrls">Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false. (optional)</param>
        /// <param name="knownSafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe. (optional)</param>
        /// <param name="knownUnsafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe. (optional)</param>
        /// <returns>XxeDetectionResult</returns>
        XxeDetectionResult TextInputCheckXxe (string value, bool? allowInternetUrls = null, string knownSafeUrls = null, string knownUnsafeUrls = null);

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks
        /// </summary>
        /// <remarks>
        /// Detects XXE (XML External Entity) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="allowInternetUrls">Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false. (optional)</param>
        /// <param name="knownSafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe. (optional)</param>
        /// <param name="knownUnsafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe. (optional)</param>
        /// <returns>ApiResponse of XxeDetectionResult</returns>
        ApiResponse<XxeDetectionResult> TextInputCheckXxeWithHttpInfo (string value, bool? allowInternetUrls = null, string knownSafeUrls = null, string knownUnsafeUrls = null);
        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks
        /// </summary>
        /// <remarks>
        /// Detects XXE (XML External Entity) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>XxeDetectionBatchResponse</returns>
        XxeDetectionBatchResponse TextInputCheckXxeBatch (XxeDetectionBatchRequest request);

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks
        /// </summary>
        /// <remarks>
        /// Detects XXE (XML External Entity) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of XxeDetectionBatchResponse</returns>
        ApiResponse<XxeDetectionBatchResponse> TextInputCheckXxeBatchWithHttpInfo (XxeDetectionBatchRequest request);
        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
        /// </summary>
        /// <remarks>
        /// Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>XssProtectionResult</returns>
        XssProtectionResult TextInputProtectXss (string value);

        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
        /// </summary>
        /// <remarks>
        /// Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of XssProtectionResult</returns>
        ApiResponse<XssProtectionResult> TextInputProtectXssWithHttpInfo (string value);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks
        /// </summary>
        /// <remarks>
        /// Detects SQL Injection (SQLI) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="detectionLevel">Set to Normal to target a high-security SQL Injection detection level with a very low false positive rate; select High to target a very-high security SQL Injection detection level with higher false positives.  Default is Normal (recommended). (optional)</param>
        /// <returns>Task of SqlInjectionDetectionResult</returns>
        System.Threading.Tasks.Task<SqlInjectionDetectionResult> TextInputCheckSqlInjectionAsync (string value, string detectionLevel = null);

        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks
        /// </summary>
        /// <remarks>
        /// Detects SQL Injection (SQLI) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="detectionLevel">Set to Normal to target a high-security SQL Injection detection level with a very low false positive rate; select High to target a very-high security SQL Injection detection level with higher false positives.  Default is Normal (recommended). (optional)</param>
        /// <returns>Task of ApiResponse (SqlInjectionDetectionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SqlInjectionDetectionResult>> TextInputCheckSqlInjectionAsyncWithHttpInfo (string value, string detectionLevel = null);
        /// <summary>
        /// Check and protect multiple text inputs for SQL Injection (SQLI) attacks in batch
        /// </summary>
        /// <remarks>
        /// Detects SQL Injection (SQLI) attacks from multiple text inputs.  Output preverses order of input items.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of SqlInjectionCheckBatchResponse</returns>
        System.Threading.Tasks.Task<SqlInjectionCheckBatchResponse> TextInputCheckSqlInjectionBatchAsync (SqlInjectionCheckBatchRequest value);

        /// <summary>
        /// Check and protect multiple text inputs for SQL Injection (SQLI) attacks in batch
        /// </summary>
        /// <remarks>
        /// Detects SQL Injection (SQLI) attacks from multiple text inputs.  Output preverses order of input items.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (SqlInjectionCheckBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SqlInjectionCheckBatchResponse>> TextInputCheckSqlInjectionBatchAsyncWithHttpInfo (SqlInjectionCheckBatchRequest value);
        /// <summary>
        /// Check text input for Cross-Site-Scripting (XSS) attacks
        /// </summary>
        /// <remarks>
        /// Detects XSS (Cross-Site-Scripting) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of XssProtectionResult</returns>
        System.Threading.Tasks.Task<XssProtectionResult> TextInputCheckXssAsync (string value);

        /// <summary>
        /// Check text input for Cross-Site-Scripting (XSS) attacks
        /// </summary>
        /// <remarks>
        /// Detects XSS (Cross-Site-Scripting) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (XssProtectionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XssProtectionResult>> TextInputCheckXssAsyncWithHttpInfo (string value);
        /// <summary>
        /// Check and protect multiple text inputs for Cross-Site-Scripting (XSS) attacks in batch
        /// </summary>
        /// <remarks>
        /// Detects XSS (Cross-Site-Scripting) attacks from multiple text inputs.  Output preverses order of input items.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of XssProtectionBatchResponse</returns>
        System.Threading.Tasks.Task<XssProtectionBatchResponse> TextInputCheckXssBatchAsync (XssProtectionBatchRequest value);

        /// <summary>
        /// Check and protect multiple text inputs for Cross-Site-Scripting (XSS) attacks in batch
        /// </summary>
        /// <remarks>
        /// Detects XSS (Cross-Site-Scripting) attacks from multiple text inputs.  Output preverses order of input items.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (XssProtectionBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<XssProtectionBatchResponse>> TextInputCheckXssBatchAsyncWithHttpInfo (XssProtectionBatchRequest value);
        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks
        /// </summary>
        /// <remarks>
        /// Detects XXE (XML External Entity) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="allowInternetUrls">Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false. (optional)</param>
        /// <param name="knownSafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe. (optional)</param>
        /// <param name="knownUnsafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe. (optional)</param>
        /// <returns>Task of XxeDetectionResult</returns>
        System.Threading.Tasks.Task<XxeDetectionResult> TextInputCheckXxeAsync (string value, bool? allowInternetUrls = null, string knownSafeUrls = null, string knownUnsafeUrls = null);

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks
        /// </summary>
        /// <remarks>
        /// Detects XXE (XML External Entity) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="allowInternetUrls">Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false. (optional)</param>
        /// <param name="knownSafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe. (optional)</param>
        /// <param name="knownUnsafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe. (optional)</param>
        /// <returns>Task of ApiResponse (XxeDetectionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XxeDetectionResult>> TextInputCheckXxeAsyncWithHttpInfo (string value, bool? allowInternetUrls = null, string knownSafeUrls = null, string knownUnsafeUrls = null);
        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks
        /// </summary>
        /// <remarks>
        /// Detects XXE (XML External Entity) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of XxeDetectionBatchResponse</returns>
        System.Threading.Tasks.Task<XxeDetectionBatchResponse> TextInputCheckXxeBatchAsync (XxeDetectionBatchRequest request);

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks
        /// </summary>
        /// <remarks>
        /// Detects XXE (XML External Entity) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (XxeDetectionBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<XxeDetectionBatchResponse>> TextInputCheckXxeBatchAsyncWithHttpInfo (XxeDetectionBatchRequest request);
        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
        /// </summary>
        /// <remarks>
        /// Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of XssProtectionResult</returns>
        System.Threading.Tasks.Task<XssProtectionResult> TextInputProtectXssAsync (string value);

        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
        /// </summary>
        /// <remarks>
        /// Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (XssProtectionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XssProtectionResult>> TextInputProtectXssAsyncWithHttpInfo (string value);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TextInputApi : ITextInputApi
    {
        private Cloudmersive.APIClient.NET.Validate.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TextInputApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TextInputApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.Validate.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.Validate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TextInputApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TextInputApi(Cloudmersive.APIClient.NET.Validate.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.Validate.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.Validate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.Validate.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.Validate.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks Detects SQL Injection (SQLI) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="detectionLevel">Set to Normal to target a high-security SQL Injection detection level with a very low false positive rate; select High to target a very-high security SQL Injection detection level with higher false positives.  Default is Normal (recommended). (optional)</param>
        /// <returns>SqlInjectionDetectionResult</returns>
        public SqlInjectionDetectionResult TextInputCheckSqlInjection (string value, string detectionLevel = null)
        {
             ApiResponse<SqlInjectionDetectionResult> localVarResponse = TextInputCheckSqlInjectionWithHttpInfo(value, detectionLevel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks Detects SQL Injection (SQLI) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="detectionLevel">Set to Normal to target a high-security SQL Injection detection level with a very low false positive rate; select High to target a very-high security SQL Injection detection level with higher false positives.  Default is Normal (recommended). (optional)</param>
        /// <returns>ApiResponse of SqlInjectionDetectionResult</returns>
        public ApiResponse< SqlInjectionDetectionResult > TextInputCheckSqlInjectionWithHttpInfo (string value, string detectionLevel = null)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TextInputApi->TextInputCheckSqlInjection");

            var localVarPath = "/validate/text-input/check/sql-injection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (detectionLevel != null) localVarHeaderParams.Add("detectionLevel", this.Configuration.ApiClient.ParameterToString(detectionLevel)); // header parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextInputCheckSqlInjection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlInjectionDetectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlInjectionDetectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlInjectionDetectionResult)));
        }

        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks Detects SQL Injection (SQLI) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="detectionLevel">Set to Normal to target a high-security SQL Injection detection level with a very low false positive rate; select High to target a very-high security SQL Injection detection level with higher false positives.  Default is Normal (recommended). (optional)</param>
        /// <returns>Task of SqlInjectionDetectionResult</returns>
        public async System.Threading.Tasks.Task<SqlInjectionDetectionResult> TextInputCheckSqlInjectionAsync (string value, string detectionLevel = null)
        {
             ApiResponse<SqlInjectionDetectionResult> localVarResponse = await TextInputCheckSqlInjectionAsyncWithHttpInfo(value, detectionLevel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks Detects SQL Injection (SQLI) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="detectionLevel">Set to Normal to target a high-security SQL Injection detection level with a very low false positive rate; select High to target a very-high security SQL Injection detection level with higher false positives.  Default is Normal (recommended). (optional)</param>
        /// <returns>Task of ApiResponse (SqlInjectionDetectionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SqlInjectionDetectionResult>> TextInputCheckSqlInjectionAsyncWithHttpInfo (string value, string detectionLevel = null)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TextInputApi->TextInputCheckSqlInjection");

            var localVarPath = "/validate/text-input/check/sql-injection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (detectionLevel != null) localVarHeaderParams.Add("detectionLevel", this.Configuration.ApiClient.ParameterToString(detectionLevel)); // header parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextInputCheckSqlInjection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlInjectionDetectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlInjectionDetectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlInjectionDetectionResult)));
        }

        /// <summary>
        /// Check and protect multiple text inputs for SQL Injection (SQLI) attacks in batch Detects SQL Injection (SQLI) attacks from multiple text inputs.  Output preverses order of input items.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>SqlInjectionCheckBatchResponse</returns>
        public SqlInjectionCheckBatchResponse TextInputCheckSqlInjectionBatch (SqlInjectionCheckBatchRequest value)
        {
             ApiResponse<SqlInjectionCheckBatchResponse> localVarResponse = TextInputCheckSqlInjectionBatchWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check and protect multiple text inputs for SQL Injection (SQLI) attacks in batch Detects SQL Injection (SQLI) attacks from multiple text inputs.  Output preverses order of input items.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of SqlInjectionCheckBatchResponse</returns>
        public ApiResponse< SqlInjectionCheckBatchResponse > TextInputCheckSqlInjectionBatchWithHttpInfo (SqlInjectionCheckBatchRequest value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TextInputApi->TextInputCheckSqlInjectionBatch");

            var localVarPath = "/validate/text-input/check/sql-injection/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextInputCheckSqlInjectionBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlInjectionCheckBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlInjectionCheckBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlInjectionCheckBatchResponse)));
        }

        /// <summary>
        /// Check and protect multiple text inputs for SQL Injection (SQLI) attacks in batch Detects SQL Injection (SQLI) attacks from multiple text inputs.  Output preverses order of input items.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of SqlInjectionCheckBatchResponse</returns>
        public async System.Threading.Tasks.Task<SqlInjectionCheckBatchResponse> TextInputCheckSqlInjectionBatchAsync (SqlInjectionCheckBatchRequest value)
        {
             ApiResponse<SqlInjectionCheckBatchResponse> localVarResponse = await TextInputCheckSqlInjectionBatchAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check and protect multiple text inputs for SQL Injection (SQLI) attacks in batch Detects SQL Injection (SQLI) attacks from multiple text inputs.  Output preverses order of input items.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (SqlInjectionCheckBatchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SqlInjectionCheckBatchResponse>> TextInputCheckSqlInjectionBatchAsyncWithHttpInfo (SqlInjectionCheckBatchRequest value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TextInputApi->TextInputCheckSqlInjectionBatch");

            var localVarPath = "/validate/text-input/check/sql-injection/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextInputCheckSqlInjectionBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SqlInjectionCheckBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SqlInjectionCheckBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SqlInjectionCheckBatchResponse)));
        }

        /// <summary>
        /// Check text input for Cross-Site-Scripting (XSS) attacks Detects XSS (Cross-Site-Scripting) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>XssProtectionResult</returns>
        public XssProtectionResult TextInputCheckXss (string value)
        {
             ApiResponse<XssProtectionResult> localVarResponse = TextInputCheckXssWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check text input for Cross-Site-Scripting (XSS) attacks Detects XSS (Cross-Site-Scripting) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of XssProtectionResult</returns>
        public ApiResponse< XssProtectionResult > TextInputCheckXssWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TextInputApi->TextInputCheckXss");

            var localVarPath = "/validate/text-input/check/xss";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextInputCheckXss", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XssProtectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XssProtectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XssProtectionResult)));
        }

        /// <summary>
        /// Check text input for Cross-Site-Scripting (XSS) attacks Detects XSS (Cross-Site-Scripting) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of XssProtectionResult</returns>
        public async System.Threading.Tasks.Task<XssProtectionResult> TextInputCheckXssAsync (string value)
        {
             ApiResponse<XssProtectionResult> localVarResponse = await TextInputCheckXssAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check text input for Cross-Site-Scripting (XSS) attacks Detects XSS (Cross-Site-Scripting) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (XssProtectionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XssProtectionResult>> TextInputCheckXssAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TextInputApi->TextInputCheckXss");

            var localVarPath = "/validate/text-input/check/xss";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextInputCheckXss", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XssProtectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XssProtectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XssProtectionResult)));
        }

        /// <summary>
        /// Check and protect multiple text inputs for Cross-Site-Scripting (XSS) attacks in batch Detects XSS (Cross-Site-Scripting) attacks from multiple text inputs.  Output preverses order of input items.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>XssProtectionBatchResponse</returns>
        public XssProtectionBatchResponse TextInputCheckXssBatch (XssProtectionBatchRequest value)
        {
             ApiResponse<XssProtectionBatchResponse> localVarResponse = TextInputCheckXssBatchWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check and protect multiple text inputs for Cross-Site-Scripting (XSS) attacks in batch Detects XSS (Cross-Site-Scripting) attacks from multiple text inputs.  Output preverses order of input items.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of XssProtectionBatchResponse</returns>
        public ApiResponse< XssProtectionBatchResponse > TextInputCheckXssBatchWithHttpInfo (XssProtectionBatchRequest value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TextInputApi->TextInputCheckXssBatch");

            var localVarPath = "/validate/text-input/check-and-protect/xss/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextInputCheckXssBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XssProtectionBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XssProtectionBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XssProtectionBatchResponse)));
        }

        /// <summary>
        /// Check and protect multiple text inputs for Cross-Site-Scripting (XSS) attacks in batch Detects XSS (Cross-Site-Scripting) attacks from multiple text inputs.  Output preverses order of input items.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of XssProtectionBatchResponse</returns>
        public async System.Threading.Tasks.Task<XssProtectionBatchResponse> TextInputCheckXssBatchAsync (XssProtectionBatchRequest value)
        {
             ApiResponse<XssProtectionBatchResponse> localVarResponse = await TextInputCheckXssBatchAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check and protect multiple text inputs for Cross-Site-Scripting (XSS) attacks in batch Detects XSS (Cross-Site-Scripting) attacks from multiple text inputs.  Output preverses order of input items.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (XssProtectionBatchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XssProtectionBatchResponse>> TextInputCheckXssBatchAsyncWithHttpInfo (XssProtectionBatchRequest value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TextInputApi->TextInputCheckXssBatch");

            var localVarPath = "/validate/text-input/check-and-protect/xss/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextInputCheckXssBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XssProtectionBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XssProtectionBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XssProtectionBatchResponse)));
        }

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks Detects XXE (XML External Entity) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="allowInternetUrls">Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false. (optional)</param>
        /// <param name="knownSafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe. (optional)</param>
        /// <param name="knownUnsafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe. (optional)</param>
        /// <returns>XxeDetectionResult</returns>
        public XxeDetectionResult TextInputCheckXxe (string value, bool? allowInternetUrls = null, string knownSafeUrls = null, string knownUnsafeUrls = null)
        {
             ApiResponse<XxeDetectionResult> localVarResponse = TextInputCheckXxeWithHttpInfo(value, allowInternetUrls, knownSafeUrls, knownUnsafeUrls);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks Detects XXE (XML External Entity) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="allowInternetUrls">Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false. (optional)</param>
        /// <param name="knownSafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe. (optional)</param>
        /// <param name="knownUnsafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe. (optional)</param>
        /// <returns>ApiResponse of XxeDetectionResult</returns>
        public ApiResponse< XxeDetectionResult > TextInputCheckXxeWithHttpInfo (string value, bool? allowInternetUrls = null, string knownSafeUrls = null, string knownUnsafeUrls = null)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TextInputApi->TextInputCheckXxe");

            var localVarPath = "/validate/text-input/check/xxe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allowInternetUrls != null) localVarHeaderParams.Add("allowInternetUrls", this.Configuration.ApiClient.ParameterToString(allowInternetUrls)); // header parameter
            if (knownSafeUrls != null) localVarHeaderParams.Add("knownSafeUrls", this.Configuration.ApiClient.ParameterToString(knownSafeUrls)); // header parameter
            if (knownUnsafeUrls != null) localVarHeaderParams.Add("knownUnsafeUrls", this.Configuration.ApiClient.ParameterToString(knownUnsafeUrls)); // header parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextInputCheckXxe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XxeDetectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XxeDetectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XxeDetectionResult)));
        }

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks Detects XXE (XML External Entity) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="allowInternetUrls">Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false. (optional)</param>
        /// <param name="knownSafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe. (optional)</param>
        /// <param name="knownUnsafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe. (optional)</param>
        /// <returns>Task of XxeDetectionResult</returns>
        public async System.Threading.Tasks.Task<XxeDetectionResult> TextInputCheckXxeAsync (string value, bool? allowInternetUrls = null, string knownSafeUrls = null, string knownUnsafeUrls = null)
        {
             ApiResponse<XxeDetectionResult> localVarResponse = await TextInputCheckXxeAsyncWithHttpInfo(value, allowInternetUrls, knownSafeUrls, knownUnsafeUrls);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks Detects XXE (XML External Entity) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <param name="allowInternetUrls">Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false. (optional)</param>
        /// <param name="knownSafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe. (optional)</param>
        /// <param name="knownUnsafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe. (optional)</param>
        /// <returns>Task of ApiResponse (XxeDetectionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XxeDetectionResult>> TextInputCheckXxeAsyncWithHttpInfo (string value, bool? allowInternetUrls = null, string knownSafeUrls = null, string knownUnsafeUrls = null)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TextInputApi->TextInputCheckXxe");

            var localVarPath = "/validate/text-input/check/xxe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allowInternetUrls != null) localVarHeaderParams.Add("allowInternetUrls", this.Configuration.ApiClient.ParameterToString(allowInternetUrls)); // header parameter
            if (knownSafeUrls != null) localVarHeaderParams.Add("knownSafeUrls", this.Configuration.ApiClient.ParameterToString(knownSafeUrls)); // header parameter
            if (knownUnsafeUrls != null) localVarHeaderParams.Add("knownUnsafeUrls", this.Configuration.ApiClient.ParameterToString(knownUnsafeUrls)); // header parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextInputCheckXxe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XxeDetectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XxeDetectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XxeDetectionResult)));
        }

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks Detects XXE (XML External Entity) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>XxeDetectionBatchResponse</returns>
        public XxeDetectionBatchResponse TextInputCheckXxeBatch (XxeDetectionBatchRequest request)
        {
             ApiResponse<XxeDetectionBatchResponse> localVarResponse = TextInputCheckXxeBatchWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks Detects XXE (XML External Entity) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of XxeDetectionBatchResponse</returns>
        public ApiResponse< XxeDetectionBatchResponse > TextInputCheckXxeBatchWithHttpInfo (XxeDetectionBatchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TextInputApi->TextInputCheckXxeBatch");

            var localVarPath = "/validate/text-input/check/xxe/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextInputCheckXxeBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XxeDetectionBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XxeDetectionBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XxeDetectionBatchResponse)));
        }

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks Detects XXE (XML External Entity) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of XxeDetectionBatchResponse</returns>
        public async System.Threading.Tasks.Task<XxeDetectionBatchResponse> TextInputCheckXxeBatchAsync (XxeDetectionBatchRequest request)
        {
             ApiResponse<XxeDetectionBatchResponse> localVarResponse = await TextInputCheckXxeBatchAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks Detects XXE (XML External Entity) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (XxeDetectionBatchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XxeDetectionBatchResponse>> TextInputCheckXxeBatchAsyncWithHttpInfo (XxeDetectionBatchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TextInputApi->TextInputCheckXxeBatch");

            var localVarPath = "/validate/text-input/check/xxe/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextInputCheckXxeBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XxeDetectionBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XxeDetectionBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XxeDetectionBatchResponse)));
        }

        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>XssProtectionResult</returns>
        public XssProtectionResult TextInputProtectXss (string value)
        {
             ApiResponse<XssProtectionResult> localVarResponse = TextInputProtectXssWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of XssProtectionResult</returns>
        public ApiResponse< XssProtectionResult > TextInputProtectXssWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TextInputApi->TextInputProtectXss");

            var localVarPath = "/validate/text-input/protect/xss";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextInputProtectXss", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XssProtectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XssProtectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XssProtectionResult)));
        }

        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of XssProtectionResult</returns>
        public async System.Threading.Tasks.Task<XssProtectionResult> TextInputProtectXssAsync (string value)
        {
             ApiResponse<XssProtectionResult> localVarResponse = await TextInputProtectXssAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (XssProtectionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XssProtectionResult>> TextInputProtectXssAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling TextInputApi->TextInputProtectXss");

            var localVarPath = "/validate/text-input/protect/xss";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextInputProtectXss", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XssProtectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XssProtectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XssProtectionResult)));
        }

    }
}
