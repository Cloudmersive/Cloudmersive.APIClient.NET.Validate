/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.Validate.Client;
using Cloudmersive.APIClient.NET.Validate.Model;

namespace Cloudmersive.APIClient.NET.Validate.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDateTimeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get current date and time as of now
        /// </summary>
        /// <remarks>
        /// Gets the current date and time.  Response time is syncronized with atomic clocks, and represents a monotonic, centrally available, consistent clock.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DateTimeNowResult</returns>
        DateTimeNowResult DateTimeGetNowSimple ();

        /// <summary>
        /// Get current date and time as of now
        /// </summary>
        /// <remarks>
        /// Gets the current date and time.  Response time is syncronized with atomic clocks, and represents a monotonic, centrally available, consistent clock.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DateTimeNowResult</returns>
        ApiResponse<DateTimeNowResult> DateTimeGetNowSimpleWithHttpInfo ();
        /// <summary>
        /// Get public holidays in the specified country and year
        /// </summary>
        /// <remarks>
        /// Enumerates all public holidays in a given country for a given year.  Supports over 100 countries.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>PublicHolidaysResponse</returns>
        PublicHolidaysResponse DateTimeGetPublicHolidays (GetPublicHolidaysRequest input);

        /// <summary>
        /// Get public holidays in the specified country and year
        /// </summary>
        /// <remarks>
        /// Enumerates all public holidays in a given country for a given year.  Supports over 100 countries.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of PublicHolidaysResponse</returns>
        ApiResponse<PublicHolidaysResponse> DateTimeGetPublicHolidaysWithHttpInfo (GetPublicHolidaysRequest input);
        /// <summary>
        /// Parses a free-form natural language date and time string into a date and time
        /// </summary>
        /// <remarks>
        /// Parses an unstructured, free-form, natural language date and time string into a date time object.  This is intended for lightweight human-entered input, such as \&quot;tomorrow at 3pm\&quot; or \&quot;tuesday\&quot;.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>DateTimeStandardizedParseResponse</returns>
        DateTimeStandardizedParseResponse DateTimeParseNaturalLanguageDateTime (DateTimeNaturalLanguageParseRequest input);

        /// <summary>
        /// Parses a free-form natural language date and time string into a date and time
        /// </summary>
        /// <remarks>
        /// Parses an unstructured, free-form, natural language date and time string into a date time object.  This is intended for lightweight human-entered input, such as \&quot;tomorrow at 3pm\&quot; or \&quot;tuesday\&quot;.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of DateTimeStandardizedParseResponse</returns>
        ApiResponse<DateTimeStandardizedParseResponse> DateTimeParseNaturalLanguageDateTimeWithHttpInfo (DateTimeNaturalLanguageParseRequest input);
        /// <summary>
        /// Parses a standardized date and time string into a date and time
        /// </summary>
        /// <remarks>
        /// Parses a structured date and time string into a date time object.  This is intended for standardized date strings that adhere to formatting conventions, rather than natural language input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>DateTimeStandardizedParseResponse</returns>
        DateTimeStandardizedParseResponse DateTimeParseStandardDateTime (DateTimeStandardizedParseRequest input);

        /// <summary>
        /// Parses a standardized date and time string into a date and time
        /// </summary>
        /// <remarks>
        /// Parses a structured date and time string into a date time object.  This is intended for standardized date strings that adhere to formatting conventions, rather than natural language input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of DateTimeStandardizedParseResponse</returns>
        ApiResponse<DateTimeStandardizedParseResponse> DateTimeParseStandardDateTimeWithHttpInfo (DateTimeStandardizedParseRequest input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get current date and time as of now
        /// </summary>
        /// <remarks>
        /// Gets the current date and time.  Response time is syncronized with atomic clocks, and represents a monotonic, centrally available, consistent clock.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DateTimeNowResult</returns>
        System.Threading.Tasks.Task<DateTimeNowResult> DateTimeGetNowSimpleAsync ();

        /// <summary>
        /// Get current date and time as of now
        /// </summary>
        /// <remarks>
        /// Gets the current date and time.  Response time is syncronized with atomic clocks, and represents a monotonic, centrally available, consistent clock.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DateTimeNowResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DateTimeNowResult>> DateTimeGetNowSimpleAsyncWithHttpInfo ();
        /// <summary>
        /// Get public holidays in the specified country and year
        /// </summary>
        /// <remarks>
        /// Enumerates all public holidays in a given country for a given year.  Supports over 100 countries.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of PublicHolidaysResponse</returns>
        System.Threading.Tasks.Task<PublicHolidaysResponse> DateTimeGetPublicHolidaysAsync (GetPublicHolidaysRequest input);

        /// <summary>
        /// Get public holidays in the specified country and year
        /// </summary>
        /// <remarks>
        /// Enumerates all public holidays in a given country for a given year.  Supports over 100 countries.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (PublicHolidaysResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicHolidaysResponse>> DateTimeGetPublicHolidaysAsyncWithHttpInfo (GetPublicHolidaysRequest input);
        /// <summary>
        /// Parses a free-form natural language date and time string into a date and time
        /// </summary>
        /// <remarks>
        /// Parses an unstructured, free-form, natural language date and time string into a date time object.  This is intended for lightweight human-entered input, such as \&quot;tomorrow at 3pm\&quot; or \&quot;tuesday\&quot;.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of DateTimeStandardizedParseResponse</returns>
        System.Threading.Tasks.Task<DateTimeStandardizedParseResponse> DateTimeParseNaturalLanguageDateTimeAsync (DateTimeNaturalLanguageParseRequest input);

        /// <summary>
        /// Parses a free-form natural language date and time string into a date and time
        /// </summary>
        /// <remarks>
        /// Parses an unstructured, free-form, natural language date and time string into a date time object.  This is intended for lightweight human-entered input, such as \&quot;tomorrow at 3pm\&quot; or \&quot;tuesday\&quot;.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (DateTimeStandardizedParseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DateTimeStandardizedParseResponse>> DateTimeParseNaturalLanguageDateTimeAsyncWithHttpInfo (DateTimeNaturalLanguageParseRequest input);
        /// <summary>
        /// Parses a standardized date and time string into a date and time
        /// </summary>
        /// <remarks>
        /// Parses a structured date and time string into a date time object.  This is intended for standardized date strings that adhere to formatting conventions, rather than natural language input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of DateTimeStandardizedParseResponse</returns>
        System.Threading.Tasks.Task<DateTimeStandardizedParseResponse> DateTimeParseStandardDateTimeAsync (DateTimeStandardizedParseRequest input);

        /// <summary>
        /// Parses a standardized date and time string into a date and time
        /// </summary>
        /// <remarks>
        /// Parses a structured date and time string into a date time object.  This is intended for standardized date strings that adhere to formatting conventions, rather than natural language input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (DateTimeStandardizedParseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DateTimeStandardizedParseResponse>> DateTimeParseStandardDateTimeAsyncWithHttpInfo (DateTimeStandardizedParseRequest input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DateTimeApi : IDateTimeApi
    {
        private Cloudmersive.APIClient.NET.Validate.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DateTimeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DateTimeApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.Validate.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.Validate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DateTimeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DateTimeApi(Cloudmersive.APIClient.NET.Validate.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.Validate.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.Validate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.Validate.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.Validate.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get current date and time as of now Gets the current date and time.  Response time is syncronized with atomic clocks, and represents a monotonic, centrally available, consistent clock.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DateTimeNowResult</returns>
        public DateTimeNowResult DateTimeGetNowSimple ()
        {
             ApiResponse<DateTimeNowResult> localVarResponse = DateTimeGetNowSimpleWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current date and time as of now Gets the current date and time.  Response time is syncronized with atomic clocks, and represents a monotonic, centrally available, consistent clock.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DateTimeNowResult</returns>
        public ApiResponse< DateTimeNowResult > DateTimeGetNowSimpleWithHttpInfo ()
        {

            var localVarPath = "/validate/date-time/get/now";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DateTimeGetNowSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DateTimeNowResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DateTimeNowResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DateTimeNowResult)));
        }

        /// <summary>
        /// Get current date and time as of now Gets the current date and time.  Response time is syncronized with atomic clocks, and represents a monotonic, centrally available, consistent clock.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DateTimeNowResult</returns>
        public async System.Threading.Tasks.Task<DateTimeNowResult> DateTimeGetNowSimpleAsync ()
        {
             ApiResponse<DateTimeNowResult> localVarResponse = await DateTimeGetNowSimpleAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current date and time as of now Gets the current date and time.  Response time is syncronized with atomic clocks, and represents a monotonic, centrally available, consistent clock.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DateTimeNowResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DateTimeNowResult>> DateTimeGetNowSimpleAsyncWithHttpInfo ()
        {

            var localVarPath = "/validate/date-time/get/now";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DateTimeGetNowSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DateTimeNowResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DateTimeNowResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DateTimeNowResult)));
        }

        /// <summary>
        /// Get public holidays in the specified country and year Enumerates all public holidays in a given country for a given year.  Supports over 100 countries.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>PublicHolidaysResponse</returns>
        public PublicHolidaysResponse DateTimeGetPublicHolidays (GetPublicHolidaysRequest input)
        {
             ApiResponse<PublicHolidaysResponse> localVarResponse = DateTimeGetPublicHolidaysWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get public holidays in the specified country and year Enumerates all public holidays in a given country for a given year.  Supports over 100 countries.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of PublicHolidaysResponse</returns>
        public ApiResponse< PublicHolidaysResponse > DateTimeGetPublicHolidaysWithHttpInfo (GetPublicHolidaysRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling DateTimeApi->DateTimeGetPublicHolidays");

            var localVarPath = "/validate/date-time/get/holidays";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DateTimeGetPublicHolidays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicHolidaysResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicHolidaysResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicHolidaysResponse)));
        }

        /// <summary>
        /// Get public holidays in the specified country and year Enumerates all public holidays in a given country for a given year.  Supports over 100 countries.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of PublicHolidaysResponse</returns>
        public async System.Threading.Tasks.Task<PublicHolidaysResponse> DateTimeGetPublicHolidaysAsync (GetPublicHolidaysRequest input)
        {
             ApiResponse<PublicHolidaysResponse> localVarResponse = await DateTimeGetPublicHolidaysAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get public holidays in the specified country and year Enumerates all public holidays in a given country for a given year.  Supports over 100 countries.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (PublicHolidaysResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicHolidaysResponse>> DateTimeGetPublicHolidaysAsyncWithHttpInfo (GetPublicHolidaysRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling DateTimeApi->DateTimeGetPublicHolidays");

            var localVarPath = "/validate/date-time/get/holidays";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DateTimeGetPublicHolidays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicHolidaysResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicHolidaysResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicHolidaysResponse)));
        }

        /// <summary>
        /// Parses a free-form natural language date and time string into a date and time Parses an unstructured, free-form, natural language date and time string into a date time object.  This is intended for lightweight human-entered input, such as \&quot;tomorrow at 3pm\&quot; or \&quot;tuesday\&quot;.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>DateTimeStandardizedParseResponse</returns>
        public DateTimeStandardizedParseResponse DateTimeParseNaturalLanguageDateTime (DateTimeNaturalLanguageParseRequest input)
        {
             ApiResponse<DateTimeStandardizedParseResponse> localVarResponse = DateTimeParseNaturalLanguageDateTimeWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Parses a free-form natural language date and time string into a date and time Parses an unstructured, free-form, natural language date and time string into a date time object.  This is intended for lightweight human-entered input, such as \&quot;tomorrow at 3pm\&quot; or \&quot;tuesday\&quot;.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of DateTimeStandardizedParseResponse</returns>
        public ApiResponse< DateTimeStandardizedParseResponse > DateTimeParseNaturalLanguageDateTimeWithHttpInfo (DateTimeNaturalLanguageParseRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling DateTimeApi->DateTimeParseNaturalLanguageDateTime");

            var localVarPath = "/validate/date-time/parse/date-time/natural-language";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DateTimeParseNaturalLanguageDateTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DateTimeStandardizedParseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DateTimeStandardizedParseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DateTimeStandardizedParseResponse)));
        }

        /// <summary>
        /// Parses a free-form natural language date and time string into a date and time Parses an unstructured, free-form, natural language date and time string into a date time object.  This is intended for lightweight human-entered input, such as \&quot;tomorrow at 3pm\&quot; or \&quot;tuesday\&quot;.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of DateTimeStandardizedParseResponse</returns>
        public async System.Threading.Tasks.Task<DateTimeStandardizedParseResponse> DateTimeParseNaturalLanguageDateTimeAsync (DateTimeNaturalLanguageParseRequest input)
        {
             ApiResponse<DateTimeStandardizedParseResponse> localVarResponse = await DateTimeParseNaturalLanguageDateTimeAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Parses a free-form natural language date and time string into a date and time Parses an unstructured, free-form, natural language date and time string into a date time object.  This is intended for lightweight human-entered input, such as \&quot;tomorrow at 3pm\&quot; or \&quot;tuesday\&quot;.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (DateTimeStandardizedParseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DateTimeStandardizedParseResponse>> DateTimeParseNaturalLanguageDateTimeAsyncWithHttpInfo (DateTimeNaturalLanguageParseRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling DateTimeApi->DateTimeParseNaturalLanguageDateTime");

            var localVarPath = "/validate/date-time/parse/date-time/natural-language";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DateTimeParseNaturalLanguageDateTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DateTimeStandardizedParseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DateTimeStandardizedParseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DateTimeStandardizedParseResponse)));
        }

        /// <summary>
        /// Parses a standardized date and time string into a date and time Parses a structured date and time string into a date time object.  This is intended for standardized date strings that adhere to formatting conventions, rather than natural language input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>DateTimeStandardizedParseResponse</returns>
        public DateTimeStandardizedParseResponse DateTimeParseStandardDateTime (DateTimeStandardizedParseRequest input)
        {
             ApiResponse<DateTimeStandardizedParseResponse> localVarResponse = DateTimeParseStandardDateTimeWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Parses a standardized date and time string into a date and time Parses a structured date and time string into a date time object.  This is intended for standardized date strings that adhere to formatting conventions, rather than natural language input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of DateTimeStandardizedParseResponse</returns>
        public ApiResponse< DateTimeStandardizedParseResponse > DateTimeParseStandardDateTimeWithHttpInfo (DateTimeStandardizedParseRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling DateTimeApi->DateTimeParseStandardDateTime");

            var localVarPath = "/validate/date-time/parse/date-time/structured";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DateTimeParseStandardDateTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DateTimeStandardizedParseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DateTimeStandardizedParseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DateTimeStandardizedParseResponse)));
        }

        /// <summary>
        /// Parses a standardized date and time string into a date and time Parses a structured date and time string into a date time object.  This is intended for standardized date strings that adhere to formatting conventions, rather than natural language input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of DateTimeStandardizedParseResponse</returns>
        public async System.Threading.Tasks.Task<DateTimeStandardizedParseResponse> DateTimeParseStandardDateTimeAsync (DateTimeStandardizedParseRequest input)
        {
             ApiResponse<DateTimeStandardizedParseResponse> localVarResponse = await DateTimeParseStandardDateTimeAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Parses a standardized date and time string into a date and time Parses a structured date and time string into a date time object.  This is intended for standardized date strings that adhere to formatting conventions, rather than natural language input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (DateTimeStandardizedParseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DateTimeStandardizedParseResponse>> DateTimeParseStandardDateTimeAsyncWithHttpInfo (DateTimeStandardizedParseRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling DateTimeApi->DateTimeParseStandardDateTime");

            var localVarPath = "/validate/date-time/parse/date-time/structured";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DateTimeParseStandardDateTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DateTimeStandardizedParseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DateTimeStandardizedParseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DateTimeStandardizedParseResponse)));
        }

    }
}
