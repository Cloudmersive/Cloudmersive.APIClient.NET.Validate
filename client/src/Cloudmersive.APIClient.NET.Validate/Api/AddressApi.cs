/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.Validate.Client;
using Cloudmersive.APIClient.NET.Validate.Model;

namespace Cloudmersive.APIClient.NET.Validate.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check if a country is a member of the European Union (EU)
        /// </summary>
        /// <remarks>
        /// Checks if the input country is a member of the European Union or not.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ValidateCountryResponse</returns>
        ValidateCountryResponse AddressCheckEUMembership (ValidateCountryRequest input);

        /// <summary>
        /// Check if a country is a member of the European Union (EU)
        /// </summary>
        /// <remarks>
        /// Checks if the input country is a member of the European Union or not.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of ValidateCountryResponse</returns>
        ApiResponse<ValidateCountryResponse> AddressCheckEUMembershipWithHttpInfo (ValidateCountryRequest input);
        /// <summary>
        /// Validate and normalize country information, return ISO 3166-1 country codes and country name
        /// </summary>
        /// <remarks>
        /// Validates and normalizes country information, and returns key information about a country, as well as whether it is a member of the European Union.  Also returns distinct time zones in the country.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ValidateCountryResponse</returns>
        ValidateCountryResponse AddressCountry (ValidateCountryRequest input);

        /// <summary>
        /// Validate and normalize country information, return ISO 3166-1 country codes and country name
        /// </summary>
        /// <remarks>
        /// Validates and normalizes country information, and returns key information about a country, as well as whether it is a member of the European Union.  Also returns distinct time zones in the country.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of ValidateCountryResponse</returns>
        ApiResponse<ValidateCountryResponse> AddressCountryWithHttpInfo (ValidateCountryRequest input);
        /// <summary>
        /// Get a list of ISO 3166-1 countries
        /// </summary>
        /// <remarks>
        /// Enumerates the list of ISO 3166-1 countries, including name, country codes, and more.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CountryListResult</returns>
        CountryListResult AddressCountryList ();

        /// <summary>
        /// Get a list of ISO 3166-1 countries
        /// </summary>
        /// <remarks>
        /// Enumerates the list of ISO 3166-1 countries, including name, country codes, and more.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CountryListResult</returns>
        ApiResponse<CountryListResult> AddressCountryListWithHttpInfo ();
        /// <summary>
        /// Geocode a street address into latitude and longitude
        /// </summary>
        /// <remarks>
        /// Geocodes a street address into latitude and longitude.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ValidateAddressResponse</returns>
        ValidateAddressResponse AddressGeocode (ValidateAddressRequest input);

        /// <summary>
        /// Geocode a street address into latitude and longitude
        /// </summary>
        /// <remarks>
        /// Geocodes a street address into latitude and longitude.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ApiResponse of ValidateAddressResponse</returns>
        ApiResponse<ValidateAddressResponse> AddressGeocodeWithHttpInfo (ValidateAddressRequest input);
        /// <summary>
        /// Get the currency of the input country
        /// </summary>
        /// <remarks>
        /// Gets the currency information for the input country, including the ISO three-letter country code, currency symbol, and English currency name.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ValidateCountryResponse</returns>
        ValidateCountryResponse AddressGetCountryCurrency (ValidateCountryRequest input);

        /// <summary>
        /// Get the currency of the input country
        /// </summary>
        /// <remarks>
        /// Gets the currency information for the input country, including the ISO three-letter country code, currency symbol, and English currency name.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of ValidateCountryResponse</returns>
        ApiResponse<ValidateCountryResponse> AddressGetCountryCurrencyWithHttpInfo (ValidateCountryRequest input);
        /// <summary>
        /// Get the region, subregion and continent of the country
        /// </summary>
        /// <remarks>
        /// Gets the continent information including region and subregion for the input country.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ValidateCountryResponse</returns>
        ValidateCountryResponse AddressGetCountryRegion (ValidateCountryRequest input);

        /// <summary>
        /// Get the region, subregion and continent of the country
        /// </summary>
        /// <remarks>
        /// Gets the continent information including region and subregion for the input country.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of ValidateCountryResponse</returns>
        ApiResponse<ValidateCountryResponse> AddressGetCountryRegionWithHttpInfo (ValidateCountryRequest input);
        /// <summary>
        /// Gets IANA/Olsen time zones for a country
        /// </summary>
        /// <remarks>
        /// Gets the IANA/Olsen time zones for a country.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>GetTimezonesResponse</returns>
        GetTimezonesResponse AddressGetTimezone (GetTimezonesRequest input);

        /// <summary>
        /// Gets IANA/Olsen time zones for a country
        /// </summary>
        /// <remarks>
        /// Gets the IANA/Olsen time zones for a country.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of GetTimezonesResponse</returns>
        ApiResponse<GetTimezonesResponse> AddressGetTimezoneWithHttpInfo (GetTimezonesRequest input);
        /// <summary>
        /// Parse an unstructured input text string into an international, formatted address
        /// </summary>
        /// <remarks>
        /// Uses machine learning and Natural Language Processing (NLP) to handle a wide array of cases, including non-standard and unstructured address strings across a wide array of countries and address formatting norms.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ParseAddressResponse</returns>
        ParseAddressResponse AddressParseString (ParseAddressRequest input);

        /// <summary>
        /// Parse an unstructured input text string into an international, formatted address
        /// </summary>
        /// <remarks>
        /// Uses machine learning and Natural Language Processing (NLP) to handle a wide array of cases, including non-standard and unstructured address strings across a wide array of countries and address formatting norms.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ApiResponse of ParseAddressResponse</returns>
        ApiResponse<ParseAddressResponse> AddressParseStringWithHttpInfo (ParseAddressRequest input);
        /// <summary>
        /// Reverse geocode a lattitude and longitude into an address
        /// </summary>
        /// <remarks>
        /// Converts lattitude and longitude coordinates into an address through reverse-geocoding.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input reverse geocoding request</param>
        /// <returns>ReverseGeocodeAddressResponse</returns>
        ReverseGeocodeAddressResponse AddressReverseGeocodeAddress (ReverseGeocodeAddressRequest input);

        /// <summary>
        /// Reverse geocode a lattitude and longitude into an address
        /// </summary>
        /// <remarks>
        /// Converts lattitude and longitude coordinates into an address through reverse-geocoding.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input reverse geocoding request</param>
        /// <returns>ApiResponse of ReverseGeocodeAddressResponse</returns>
        ApiResponse<ReverseGeocodeAddressResponse> AddressReverseGeocodeAddressWithHttpInfo (ReverseGeocodeAddressRequest input);
        /// <summary>
        /// Validate a street address
        /// </summary>
        /// <remarks>
        /// Determines if an input structured street address is valid or invalid.  If the address is valid, also returns the latitude and longitude of the address.  Supports all major international addresses.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ValidateAddressResponse</returns>
        ValidateAddressResponse AddressValidateAddress (ValidateAddressRequest input);

        /// <summary>
        /// Validate a street address
        /// </summary>
        /// <remarks>
        /// Determines if an input structured street address is valid or invalid.  If the address is valid, also returns the latitude and longitude of the address.  Supports all major international addresses.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ApiResponse of ValidateAddressResponse</returns>
        ApiResponse<ValidateAddressResponse> AddressValidateAddressWithHttpInfo (ValidateAddressRequest input);
        /// <summary>
        /// Validate a City and State/Province combination, get location information about it
        /// </summary>
        /// <remarks>
        /// Checks if the input city and state name or code is valid, and returns information about it such as normalized City name, State name and more.  Supports all major international addresses.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ValidateCityResponse</returns>
        ValidateCityResponse AddressValidateCity (ValidateCityRequest input);

        /// <summary>
        /// Validate a City and State/Province combination, get location information about it
        /// </summary>
        /// <remarks>
        /// Checks if the input city and state name or code is valid, and returns information about it such as normalized City name, State name and more.  Supports all major international addresses.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ApiResponse of ValidateCityResponse</returns>
        ApiResponse<ValidateCityResponse> AddressValidateCityWithHttpInfo (ValidateCityRequest input);
        /// <summary>
        /// Validate a postal code, get location information about it
        /// </summary>
        /// <remarks>
        /// Checks if the input postal code is valid, and returns information about it such as City, State and more.  Supports all major countries.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ValidatePostalCodeResponse</returns>
        ValidatePostalCodeResponse AddressValidatePostalCode (ValidatePostalCodeRequest input);

        /// <summary>
        /// Validate a postal code, get location information about it
        /// </summary>
        /// <remarks>
        /// Checks if the input postal code is valid, and returns information about it such as City, State and more.  Supports all major countries.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ApiResponse of ValidatePostalCodeResponse</returns>
        ApiResponse<ValidatePostalCodeResponse> AddressValidatePostalCodeWithHttpInfo (ValidatePostalCodeRequest input);
        /// <summary>
        /// Validate a state or province, name or abbreviation, get location information about it
        /// </summary>
        /// <remarks>
        /// Checks if the input state name or code is valid, and returns information about it such as normalized State name and more.  Supports all major countries.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ValidateStateResponse</returns>
        ValidateStateResponse AddressValidateState (ValidateStateRequest input);

        /// <summary>
        /// Validate a state or province, name or abbreviation, get location information about it
        /// </summary>
        /// <remarks>
        /// Checks if the input state name or code is valid, and returns information about it such as normalized State name and more.  Supports all major countries.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ApiResponse of ValidateStateResponse</returns>
        ApiResponse<ValidateStateResponse> AddressValidateStateWithHttpInfo (ValidateStateRequest input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Check if a country is a member of the European Union (EU)
        /// </summary>
        /// <remarks>
        /// Checks if the input country is a member of the European Union or not.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ValidateCountryResponse</returns>
        System.Threading.Tasks.Task<ValidateCountryResponse> AddressCheckEUMembershipAsync (ValidateCountryRequest input);

        /// <summary>
        /// Check if a country is a member of the European Union (EU)
        /// </summary>
        /// <remarks>
        /// Checks if the input country is a member of the European Union or not.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (ValidateCountryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateCountryResponse>> AddressCheckEUMembershipAsyncWithHttpInfo (ValidateCountryRequest input);
        /// <summary>
        /// Validate and normalize country information, return ISO 3166-1 country codes and country name
        /// </summary>
        /// <remarks>
        /// Validates and normalizes country information, and returns key information about a country, as well as whether it is a member of the European Union.  Also returns distinct time zones in the country.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ValidateCountryResponse</returns>
        System.Threading.Tasks.Task<ValidateCountryResponse> AddressCountryAsync (ValidateCountryRequest input);

        /// <summary>
        /// Validate and normalize country information, return ISO 3166-1 country codes and country name
        /// </summary>
        /// <remarks>
        /// Validates and normalizes country information, and returns key information about a country, as well as whether it is a member of the European Union.  Also returns distinct time zones in the country.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (ValidateCountryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateCountryResponse>> AddressCountryAsyncWithHttpInfo (ValidateCountryRequest input);
        /// <summary>
        /// Get a list of ISO 3166-1 countries
        /// </summary>
        /// <remarks>
        /// Enumerates the list of ISO 3166-1 countries, including name, country codes, and more.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CountryListResult</returns>
        System.Threading.Tasks.Task<CountryListResult> AddressCountryListAsync ();

        /// <summary>
        /// Get a list of ISO 3166-1 countries
        /// </summary>
        /// <remarks>
        /// Enumerates the list of ISO 3166-1 countries, including name, country codes, and more.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CountryListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountryListResult>> AddressCountryListAsyncWithHttpInfo ();
        /// <summary>
        /// Geocode a street address into latitude and longitude
        /// </summary>
        /// <remarks>
        /// Geocodes a street address into latitude and longitude.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ValidateAddressResponse</returns>
        System.Threading.Tasks.Task<ValidateAddressResponse> AddressGeocodeAsync (ValidateAddressRequest input);

        /// <summary>
        /// Geocode a street address into latitude and longitude
        /// </summary>
        /// <remarks>
        /// Geocodes a street address into latitude and longitude.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ApiResponse (ValidateAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateAddressResponse>> AddressGeocodeAsyncWithHttpInfo (ValidateAddressRequest input);
        /// <summary>
        /// Get the currency of the input country
        /// </summary>
        /// <remarks>
        /// Gets the currency information for the input country, including the ISO three-letter country code, currency symbol, and English currency name.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ValidateCountryResponse</returns>
        System.Threading.Tasks.Task<ValidateCountryResponse> AddressGetCountryCurrencyAsync (ValidateCountryRequest input);

        /// <summary>
        /// Get the currency of the input country
        /// </summary>
        /// <remarks>
        /// Gets the currency information for the input country, including the ISO three-letter country code, currency symbol, and English currency name.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (ValidateCountryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateCountryResponse>> AddressGetCountryCurrencyAsyncWithHttpInfo (ValidateCountryRequest input);
        /// <summary>
        /// Get the region, subregion and continent of the country
        /// </summary>
        /// <remarks>
        /// Gets the continent information including region and subregion for the input country.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ValidateCountryResponse</returns>
        System.Threading.Tasks.Task<ValidateCountryResponse> AddressGetCountryRegionAsync (ValidateCountryRequest input);

        /// <summary>
        /// Get the region, subregion and continent of the country
        /// </summary>
        /// <remarks>
        /// Gets the continent information including region and subregion for the input country.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (ValidateCountryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateCountryResponse>> AddressGetCountryRegionAsyncWithHttpInfo (ValidateCountryRequest input);
        /// <summary>
        /// Gets IANA/Olsen time zones for a country
        /// </summary>
        /// <remarks>
        /// Gets the IANA/Olsen time zones for a country.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of GetTimezonesResponse</returns>
        System.Threading.Tasks.Task<GetTimezonesResponse> AddressGetTimezoneAsync (GetTimezonesRequest input);

        /// <summary>
        /// Gets IANA/Olsen time zones for a country
        /// </summary>
        /// <remarks>
        /// Gets the IANA/Olsen time zones for a country.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (GetTimezonesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTimezonesResponse>> AddressGetTimezoneAsyncWithHttpInfo (GetTimezonesRequest input);
        /// <summary>
        /// Parse an unstructured input text string into an international, formatted address
        /// </summary>
        /// <remarks>
        /// Uses machine learning and Natural Language Processing (NLP) to handle a wide array of cases, including non-standard and unstructured address strings across a wide array of countries and address formatting norms.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ParseAddressResponse</returns>
        System.Threading.Tasks.Task<ParseAddressResponse> AddressParseStringAsync (ParseAddressRequest input);

        /// <summary>
        /// Parse an unstructured input text string into an international, formatted address
        /// </summary>
        /// <remarks>
        /// Uses machine learning and Natural Language Processing (NLP) to handle a wide array of cases, including non-standard and unstructured address strings across a wide array of countries and address formatting norms.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ApiResponse (ParseAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParseAddressResponse>> AddressParseStringAsyncWithHttpInfo (ParseAddressRequest input);
        /// <summary>
        /// Reverse geocode a lattitude and longitude into an address
        /// </summary>
        /// <remarks>
        /// Converts lattitude and longitude coordinates into an address through reverse-geocoding.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input reverse geocoding request</param>
        /// <returns>Task of ReverseGeocodeAddressResponse</returns>
        System.Threading.Tasks.Task<ReverseGeocodeAddressResponse> AddressReverseGeocodeAddressAsync (ReverseGeocodeAddressRequest input);

        /// <summary>
        /// Reverse geocode a lattitude and longitude into an address
        /// </summary>
        /// <remarks>
        /// Converts lattitude and longitude coordinates into an address through reverse-geocoding.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input reverse geocoding request</param>
        /// <returns>Task of ApiResponse (ReverseGeocodeAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReverseGeocodeAddressResponse>> AddressReverseGeocodeAddressAsyncWithHttpInfo (ReverseGeocodeAddressRequest input);
        /// <summary>
        /// Validate a street address
        /// </summary>
        /// <remarks>
        /// Determines if an input structured street address is valid or invalid.  If the address is valid, also returns the latitude and longitude of the address.  Supports all major international addresses.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ValidateAddressResponse</returns>
        System.Threading.Tasks.Task<ValidateAddressResponse> AddressValidateAddressAsync (ValidateAddressRequest input);

        /// <summary>
        /// Validate a street address
        /// </summary>
        /// <remarks>
        /// Determines if an input structured street address is valid or invalid.  If the address is valid, also returns the latitude and longitude of the address.  Supports all major international addresses.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ApiResponse (ValidateAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateAddressResponse>> AddressValidateAddressAsyncWithHttpInfo (ValidateAddressRequest input);
        /// <summary>
        /// Validate a City and State/Province combination, get location information about it
        /// </summary>
        /// <remarks>
        /// Checks if the input city and state name or code is valid, and returns information about it such as normalized City name, State name and more.  Supports all major international addresses.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ValidateCityResponse</returns>
        System.Threading.Tasks.Task<ValidateCityResponse> AddressValidateCityAsync (ValidateCityRequest input);

        /// <summary>
        /// Validate a City and State/Province combination, get location information about it
        /// </summary>
        /// <remarks>
        /// Checks if the input city and state name or code is valid, and returns information about it such as normalized City name, State name and more.  Supports all major international addresses.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ApiResponse (ValidateCityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateCityResponse>> AddressValidateCityAsyncWithHttpInfo (ValidateCityRequest input);
        /// <summary>
        /// Validate a postal code, get location information about it
        /// </summary>
        /// <remarks>
        /// Checks if the input postal code is valid, and returns information about it such as City, State and more.  Supports all major countries.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ValidatePostalCodeResponse</returns>
        System.Threading.Tasks.Task<ValidatePostalCodeResponse> AddressValidatePostalCodeAsync (ValidatePostalCodeRequest input);

        /// <summary>
        /// Validate a postal code, get location information about it
        /// </summary>
        /// <remarks>
        /// Checks if the input postal code is valid, and returns information about it such as City, State and more.  Supports all major countries.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ApiResponse (ValidatePostalCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidatePostalCodeResponse>> AddressValidatePostalCodeAsyncWithHttpInfo (ValidatePostalCodeRequest input);
        /// <summary>
        /// Validate a state or province, name or abbreviation, get location information about it
        /// </summary>
        /// <remarks>
        /// Checks if the input state name or code is valid, and returns information about it such as normalized State name and more.  Supports all major countries.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ValidateStateResponse</returns>
        System.Threading.Tasks.Task<ValidateStateResponse> AddressValidateStateAsync (ValidateStateRequest input);

        /// <summary>
        /// Validate a state or province, name or abbreviation, get location information about it
        /// </summary>
        /// <remarks>
        /// Checks if the input state name or code is valid, and returns information about it such as normalized State name and more.  Supports all major countries.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ApiResponse (ValidateStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateStateResponse>> AddressValidateStateAsyncWithHttpInfo (ValidateStateRequest input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressApi : IAddressApi
    {
        private Cloudmersive.APIClient.NET.Validate.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.Validate.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.Validate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressApi(Cloudmersive.APIClient.NET.Validate.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.Validate.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.Validate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.Validate.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.Validate.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Check if a country is a member of the European Union (EU) Checks if the input country is a member of the European Union or not.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ValidateCountryResponse</returns>
        public ValidateCountryResponse AddressCheckEUMembership (ValidateCountryRequest input)
        {
             ApiResponse<ValidateCountryResponse> localVarResponse = AddressCheckEUMembershipWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if a country is a member of the European Union (EU) Checks if the input country is a member of the European Union or not.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of ValidateCountryResponse</returns>
        public ApiResponse< ValidateCountryResponse > AddressCheckEUMembershipWithHttpInfo (ValidateCountryRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressCheckEUMembership");

            var localVarPath = "/validate/address/country/check-eu-membership";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressCheckEUMembership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateCountryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateCountryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateCountryResponse)));
        }

        /// <summary>
        /// Check if a country is a member of the European Union (EU) Checks if the input country is a member of the European Union or not.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ValidateCountryResponse</returns>
        public async System.Threading.Tasks.Task<ValidateCountryResponse> AddressCheckEUMembershipAsync (ValidateCountryRequest input)
        {
             ApiResponse<ValidateCountryResponse> localVarResponse = await AddressCheckEUMembershipAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if a country is a member of the European Union (EU) Checks if the input country is a member of the European Union or not.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (ValidateCountryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateCountryResponse>> AddressCheckEUMembershipAsyncWithHttpInfo (ValidateCountryRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressCheckEUMembership");

            var localVarPath = "/validate/address/country/check-eu-membership";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressCheckEUMembership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateCountryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateCountryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateCountryResponse)));
        }

        /// <summary>
        /// Validate and normalize country information, return ISO 3166-1 country codes and country name Validates and normalizes country information, and returns key information about a country, as well as whether it is a member of the European Union.  Also returns distinct time zones in the country.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ValidateCountryResponse</returns>
        public ValidateCountryResponse AddressCountry (ValidateCountryRequest input)
        {
             ApiResponse<ValidateCountryResponse> localVarResponse = AddressCountryWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate and normalize country information, return ISO 3166-1 country codes and country name Validates and normalizes country information, and returns key information about a country, as well as whether it is a member of the European Union.  Also returns distinct time zones in the country.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of ValidateCountryResponse</returns>
        public ApiResponse< ValidateCountryResponse > AddressCountryWithHttpInfo (ValidateCountryRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressCountry");

            var localVarPath = "/validate/address/country";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateCountryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateCountryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateCountryResponse)));
        }

        /// <summary>
        /// Validate and normalize country information, return ISO 3166-1 country codes and country name Validates and normalizes country information, and returns key information about a country, as well as whether it is a member of the European Union.  Also returns distinct time zones in the country.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ValidateCountryResponse</returns>
        public async System.Threading.Tasks.Task<ValidateCountryResponse> AddressCountryAsync (ValidateCountryRequest input)
        {
             ApiResponse<ValidateCountryResponse> localVarResponse = await AddressCountryAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate and normalize country information, return ISO 3166-1 country codes and country name Validates and normalizes country information, and returns key information about a country, as well as whether it is a member of the European Union.  Also returns distinct time zones in the country.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (ValidateCountryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateCountryResponse>> AddressCountryAsyncWithHttpInfo (ValidateCountryRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressCountry");

            var localVarPath = "/validate/address/country";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateCountryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateCountryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateCountryResponse)));
        }

        /// <summary>
        /// Get a list of ISO 3166-1 countries Enumerates the list of ISO 3166-1 countries, including name, country codes, and more.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CountryListResult</returns>
        public CountryListResult AddressCountryList ()
        {
             ApiResponse<CountryListResult> localVarResponse = AddressCountryListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of ISO 3166-1 countries Enumerates the list of ISO 3166-1 countries, including name, country codes, and more.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CountryListResult</returns>
        public ApiResponse< CountryListResult > AddressCountryListWithHttpInfo ()
        {

            var localVarPath = "/validate/address/country/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressCountryList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountryListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CountryListResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountryListResult)));
        }

        /// <summary>
        /// Get a list of ISO 3166-1 countries Enumerates the list of ISO 3166-1 countries, including name, country codes, and more.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CountryListResult</returns>
        public async System.Threading.Tasks.Task<CountryListResult> AddressCountryListAsync ()
        {
             ApiResponse<CountryListResult> localVarResponse = await AddressCountryListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of ISO 3166-1 countries Enumerates the list of ISO 3166-1 countries, including name, country codes, and more.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CountryListResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountryListResult>> AddressCountryListAsyncWithHttpInfo ()
        {

            var localVarPath = "/validate/address/country/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressCountryList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountryListResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CountryListResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountryListResult)));
        }

        /// <summary>
        /// Geocode a street address into latitude and longitude Geocodes a street address into latitude and longitude.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ValidateAddressResponse</returns>
        public ValidateAddressResponse AddressGeocode (ValidateAddressRequest input)
        {
             ApiResponse<ValidateAddressResponse> localVarResponse = AddressGeocodeWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Geocode a street address into latitude and longitude Geocodes a street address into latitude and longitude.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ApiResponse of ValidateAddressResponse</returns>
        public ApiResponse< ValidateAddressResponse > AddressGeocodeWithHttpInfo (ValidateAddressRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressGeocode");

            var localVarPath = "/validate/address/geocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressGeocode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateAddressResponse)));
        }

        /// <summary>
        /// Geocode a street address into latitude and longitude Geocodes a street address into latitude and longitude.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ValidateAddressResponse</returns>
        public async System.Threading.Tasks.Task<ValidateAddressResponse> AddressGeocodeAsync (ValidateAddressRequest input)
        {
             ApiResponse<ValidateAddressResponse> localVarResponse = await AddressGeocodeAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Geocode a street address into latitude and longitude Geocodes a street address into latitude and longitude.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ApiResponse (ValidateAddressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateAddressResponse>> AddressGeocodeAsyncWithHttpInfo (ValidateAddressRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressGeocode");

            var localVarPath = "/validate/address/geocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressGeocode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateAddressResponse)));
        }

        /// <summary>
        /// Get the currency of the input country Gets the currency information for the input country, including the ISO three-letter country code, currency symbol, and English currency name.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ValidateCountryResponse</returns>
        public ValidateCountryResponse AddressGetCountryCurrency (ValidateCountryRequest input)
        {
             ApiResponse<ValidateCountryResponse> localVarResponse = AddressGetCountryCurrencyWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the currency of the input country Gets the currency information for the input country, including the ISO three-letter country code, currency symbol, and English currency name.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of ValidateCountryResponse</returns>
        public ApiResponse< ValidateCountryResponse > AddressGetCountryCurrencyWithHttpInfo (ValidateCountryRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressGetCountryCurrency");

            var localVarPath = "/validate/address/country/get-currency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressGetCountryCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateCountryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateCountryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateCountryResponse)));
        }

        /// <summary>
        /// Get the currency of the input country Gets the currency information for the input country, including the ISO three-letter country code, currency symbol, and English currency name.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ValidateCountryResponse</returns>
        public async System.Threading.Tasks.Task<ValidateCountryResponse> AddressGetCountryCurrencyAsync (ValidateCountryRequest input)
        {
             ApiResponse<ValidateCountryResponse> localVarResponse = await AddressGetCountryCurrencyAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the currency of the input country Gets the currency information for the input country, including the ISO three-letter country code, currency symbol, and English currency name.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (ValidateCountryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateCountryResponse>> AddressGetCountryCurrencyAsyncWithHttpInfo (ValidateCountryRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressGetCountryCurrency");

            var localVarPath = "/validate/address/country/get-currency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressGetCountryCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateCountryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateCountryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateCountryResponse)));
        }

        /// <summary>
        /// Get the region, subregion and continent of the country Gets the continent information including region and subregion for the input country.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ValidateCountryResponse</returns>
        public ValidateCountryResponse AddressGetCountryRegion (ValidateCountryRequest input)
        {
             ApiResponse<ValidateCountryResponse> localVarResponse = AddressGetCountryRegionWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the region, subregion and continent of the country Gets the continent information including region and subregion for the input country.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of ValidateCountryResponse</returns>
        public ApiResponse< ValidateCountryResponse > AddressGetCountryRegionWithHttpInfo (ValidateCountryRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressGetCountryRegion");

            var localVarPath = "/validate/address/country/get-region";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressGetCountryRegion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateCountryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateCountryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateCountryResponse)));
        }

        /// <summary>
        /// Get the region, subregion and continent of the country Gets the continent information including region and subregion for the input country.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ValidateCountryResponse</returns>
        public async System.Threading.Tasks.Task<ValidateCountryResponse> AddressGetCountryRegionAsync (ValidateCountryRequest input)
        {
             ApiResponse<ValidateCountryResponse> localVarResponse = await AddressGetCountryRegionAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the region, subregion and continent of the country Gets the continent information including region and subregion for the input country.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (ValidateCountryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateCountryResponse>> AddressGetCountryRegionAsyncWithHttpInfo (ValidateCountryRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressGetCountryRegion");

            var localVarPath = "/validate/address/country/get-region";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressGetCountryRegion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateCountryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateCountryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateCountryResponse)));
        }

        /// <summary>
        /// Gets IANA/Olsen time zones for a country Gets the IANA/Olsen time zones for a country.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>GetTimezonesResponse</returns>
        public GetTimezonesResponse AddressGetTimezone (GetTimezonesRequest input)
        {
             ApiResponse<GetTimezonesResponse> localVarResponse = AddressGetTimezoneWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets IANA/Olsen time zones for a country Gets the IANA/Olsen time zones for a country.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>ApiResponse of GetTimezonesResponse</returns>
        public ApiResponse< GetTimezonesResponse > AddressGetTimezoneWithHttpInfo (GetTimezonesRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressGetTimezone");

            var localVarPath = "/validate/address/country/get-timezones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressGetTimezone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTimezonesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTimezonesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTimezonesResponse)));
        }

        /// <summary>
        /// Gets IANA/Olsen time zones for a country Gets the IANA/Olsen time zones for a country.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of GetTimezonesResponse</returns>
        public async System.Threading.Tasks.Task<GetTimezonesResponse> AddressGetTimezoneAsync (GetTimezonesRequest input)
        {
             ApiResponse<GetTimezonesResponse> localVarResponse = await AddressGetTimezoneAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets IANA/Olsen time zones for a country Gets the IANA/Olsen time zones for a country.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input request</param>
        /// <returns>Task of ApiResponse (GetTimezonesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTimezonesResponse>> AddressGetTimezoneAsyncWithHttpInfo (GetTimezonesRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressGetTimezone");

            var localVarPath = "/validate/address/country/get-timezones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressGetTimezone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTimezonesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTimezonesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTimezonesResponse)));
        }

        /// <summary>
        /// Parse an unstructured input text string into an international, formatted address Uses machine learning and Natural Language Processing (NLP) to handle a wide array of cases, including non-standard and unstructured address strings across a wide array of countries and address formatting norms.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ParseAddressResponse</returns>
        public ParseAddressResponse AddressParseString (ParseAddressRequest input)
        {
             ApiResponse<ParseAddressResponse> localVarResponse = AddressParseStringWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Parse an unstructured input text string into an international, formatted address Uses machine learning and Natural Language Processing (NLP) to handle a wide array of cases, including non-standard and unstructured address strings across a wide array of countries and address formatting norms.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ApiResponse of ParseAddressResponse</returns>
        public ApiResponse< ParseAddressResponse > AddressParseStringWithHttpInfo (ParseAddressRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressParseString");

            var localVarPath = "/validate/address/parse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressParseString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParseAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ParseAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParseAddressResponse)));
        }

        /// <summary>
        /// Parse an unstructured input text string into an international, formatted address Uses machine learning and Natural Language Processing (NLP) to handle a wide array of cases, including non-standard and unstructured address strings across a wide array of countries and address formatting norms.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ParseAddressResponse</returns>
        public async System.Threading.Tasks.Task<ParseAddressResponse> AddressParseStringAsync (ParseAddressRequest input)
        {
             ApiResponse<ParseAddressResponse> localVarResponse = await AddressParseStringAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Parse an unstructured input text string into an international, formatted address Uses machine learning and Natural Language Processing (NLP) to handle a wide array of cases, including non-standard and unstructured address strings across a wide array of countries and address formatting norms.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ApiResponse (ParseAddressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ParseAddressResponse>> AddressParseStringAsyncWithHttpInfo (ParseAddressRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressParseString");

            var localVarPath = "/validate/address/parse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressParseString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParseAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ParseAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParseAddressResponse)));
        }

        /// <summary>
        /// Reverse geocode a lattitude and longitude into an address Converts lattitude and longitude coordinates into an address through reverse-geocoding.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input reverse geocoding request</param>
        /// <returns>ReverseGeocodeAddressResponse</returns>
        public ReverseGeocodeAddressResponse AddressReverseGeocodeAddress (ReverseGeocodeAddressRequest input)
        {
             ApiResponse<ReverseGeocodeAddressResponse> localVarResponse = AddressReverseGeocodeAddressWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reverse geocode a lattitude and longitude into an address Converts lattitude and longitude coordinates into an address through reverse-geocoding.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input reverse geocoding request</param>
        /// <returns>ApiResponse of ReverseGeocodeAddressResponse</returns>
        public ApiResponse< ReverseGeocodeAddressResponse > AddressReverseGeocodeAddressWithHttpInfo (ReverseGeocodeAddressRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressReverseGeocodeAddress");

            var localVarPath = "/validate/address/geocode/reverse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressReverseGeocodeAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReverseGeocodeAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReverseGeocodeAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReverseGeocodeAddressResponse)));
        }

        /// <summary>
        /// Reverse geocode a lattitude and longitude into an address Converts lattitude and longitude coordinates into an address through reverse-geocoding.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input reverse geocoding request</param>
        /// <returns>Task of ReverseGeocodeAddressResponse</returns>
        public async System.Threading.Tasks.Task<ReverseGeocodeAddressResponse> AddressReverseGeocodeAddressAsync (ReverseGeocodeAddressRequest input)
        {
             ApiResponse<ReverseGeocodeAddressResponse> localVarResponse = await AddressReverseGeocodeAddressAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reverse geocode a lattitude and longitude into an address Converts lattitude and longitude coordinates into an address through reverse-geocoding.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input reverse geocoding request</param>
        /// <returns>Task of ApiResponse (ReverseGeocodeAddressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReverseGeocodeAddressResponse>> AddressReverseGeocodeAddressAsyncWithHttpInfo (ReverseGeocodeAddressRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressReverseGeocodeAddress");

            var localVarPath = "/validate/address/geocode/reverse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressReverseGeocodeAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReverseGeocodeAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReverseGeocodeAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReverseGeocodeAddressResponse)));
        }

        /// <summary>
        /// Validate a street address Determines if an input structured street address is valid or invalid.  If the address is valid, also returns the latitude and longitude of the address.  Supports all major international addresses.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ValidateAddressResponse</returns>
        public ValidateAddressResponse AddressValidateAddress (ValidateAddressRequest input)
        {
             ApiResponse<ValidateAddressResponse> localVarResponse = AddressValidateAddressWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a street address Determines if an input structured street address is valid or invalid.  If the address is valid, also returns the latitude and longitude of the address.  Supports all major international addresses.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ApiResponse of ValidateAddressResponse</returns>
        public ApiResponse< ValidateAddressResponse > AddressValidateAddressWithHttpInfo (ValidateAddressRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressValidateAddress");

            var localVarPath = "/validate/address/street-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressValidateAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateAddressResponse)));
        }

        /// <summary>
        /// Validate a street address Determines if an input structured street address is valid or invalid.  If the address is valid, also returns the latitude and longitude of the address.  Supports all major international addresses.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ValidateAddressResponse</returns>
        public async System.Threading.Tasks.Task<ValidateAddressResponse> AddressValidateAddressAsync (ValidateAddressRequest input)
        {
             ApiResponse<ValidateAddressResponse> localVarResponse = await AddressValidateAddressAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate a street address Determines if an input structured street address is valid or invalid.  If the address is valid, also returns the latitude and longitude of the address.  Supports all major international addresses.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ApiResponse (ValidateAddressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateAddressResponse>> AddressValidateAddressAsyncWithHttpInfo (ValidateAddressRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressValidateAddress");

            var localVarPath = "/validate/address/street-address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressValidateAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateAddressResponse)));
        }

        /// <summary>
        /// Validate a City and State/Province combination, get location information about it Checks if the input city and state name or code is valid, and returns information about it such as normalized City name, State name and more.  Supports all major international addresses.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ValidateCityResponse</returns>
        public ValidateCityResponse AddressValidateCity (ValidateCityRequest input)
        {
             ApiResponse<ValidateCityResponse> localVarResponse = AddressValidateCityWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a City and State/Province combination, get location information about it Checks if the input city and state name or code is valid, and returns information about it such as normalized City name, State name and more.  Supports all major international addresses.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ApiResponse of ValidateCityResponse</returns>
        public ApiResponse< ValidateCityResponse > AddressValidateCityWithHttpInfo (ValidateCityRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressValidateCity");

            var localVarPath = "/validate/address/city";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressValidateCity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateCityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateCityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateCityResponse)));
        }

        /// <summary>
        /// Validate a City and State/Province combination, get location information about it Checks if the input city and state name or code is valid, and returns information about it such as normalized City name, State name and more.  Supports all major international addresses.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ValidateCityResponse</returns>
        public async System.Threading.Tasks.Task<ValidateCityResponse> AddressValidateCityAsync (ValidateCityRequest input)
        {
             ApiResponse<ValidateCityResponse> localVarResponse = await AddressValidateCityAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate a City and State/Province combination, get location information about it Checks if the input city and state name or code is valid, and returns information about it such as normalized City name, State name and more.  Supports all major international addresses.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ApiResponse (ValidateCityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateCityResponse>> AddressValidateCityAsyncWithHttpInfo (ValidateCityRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressValidateCity");

            var localVarPath = "/validate/address/city";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressValidateCity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateCityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateCityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateCityResponse)));
        }

        /// <summary>
        /// Validate a postal code, get location information about it Checks if the input postal code is valid, and returns information about it such as City, State and more.  Supports all major countries.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ValidatePostalCodeResponse</returns>
        public ValidatePostalCodeResponse AddressValidatePostalCode (ValidatePostalCodeRequest input)
        {
             ApiResponse<ValidatePostalCodeResponse> localVarResponse = AddressValidatePostalCodeWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a postal code, get location information about it Checks if the input postal code is valid, and returns information about it such as City, State and more.  Supports all major countries.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ApiResponse of ValidatePostalCodeResponse</returns>
        public ApiResponse< ValidatePostalCodeResponse > AddressValidatePostalCodeWithHttpInfo (ValidatePostalCodeRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressValidatePostalCode");

            var localVarPath = "/validate/address/postal-code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressValidatePostalCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidatePostalCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidatePostalCodeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidatePostalCodeResponse)));
        }

        /// <summary>
        /// Validate a postal code, get location information about it Checks if the input postal code is valid, and returns information about it such as City, State and more.  Supports all major countries.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ValidatePostalCodeResponse</returns>
        public async System.Threading.Tasks.Task<ValidatePostalCodeResponse> AddressValidatePostalCodeAsync (ValidatePostalCodeRequest input)
        {
             ApiResponse<ValidatePostalCodeResponse> localVarResponse = await AddressValidatePostalCodeAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate a postal code, get location information about it Checks if the input postal code is valid, and returns information about it such as City, State and more.  Supports all major countries.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ApiResponse (ValidatePostalCodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidatePostalCodeResponse>> AddressValidatePostalCodeAsyncWithHttpInfo (ValidatePostalCodeRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressValidatePostalCode");

            var localVarPath = "/validate/address/postal-code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressValidatePostalCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidatePostalCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidatePostalCodeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidatePostalCodeResponse)));
        }

        /// <summary>
        /// Validate a state or province, name or abbreviation, get location information about it Checks if the input state name or code is valid, and returns information about it such as normalized State name and more.  Supports all major countries.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ValidateStateResponse</returns>
        public ValidateStateResponse AddressValidateState (ValidateStateRequest input)
        {
             ApiResponse<ValidateStateResponse> localVarResponse = AddressValidateStateWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a state or province, name or abbreviation, get location information about it Checks if the input state name or code is valid, and returns information about it such as normalized State name and more.  Supports all major countries.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>ApiResponse of ValidateStateResponse</returns>
        public ApiResponse< ValidateStateResponse > AddressValidateStateWithHttpInfo (ValidateStateRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressValidateState");

            var localVarPath = "/validate/address/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressValidateState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateStateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateStateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateStateResponse)));
        }

        /// <summary>
        /// Validate a state or province, name or abbreviation, get location information about it Checks if the input state name or code is valid, and returns information about it such as normalized State name and more.  Supports all major countries.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ValidateStateResponse</returns>
        public async System.Threading.Tasks.Task<ValidateStateResponse> AddressValidateStateAsync (ValidateStateRequest input)
        {
             ApiResponse<ValidateStateResponse> localVarResponse = await AddressValidateStateAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate a state or province, name or abbreviation, get location information about it Checks if the input state name or code is valid, and returns information about it such as normalized State name and more.  Supports all major countries.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input parse request</param>
        /// <returns>Task of ApiResponse (ValidateStateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateStateResponse>> AddressValidateStateAsyncWithHttpInfo (ValidateStateRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AddressApi->AddressValidateState");

            var localVarPath = "/validate/address/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressValidateState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidateStateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidateStateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateStateResponse)));
        }

    }
}
