/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.Validate.Client;
using Cloudmersive.APIClient.NET.Validate.Model;

namespace Cloudmersive.APIClient.NET.Validate.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Partially check whether an email address is valid
        /// </summary>
        /// <remarks>
        /// Validate an email address by identifying whether its parent domain has email servers defined.  This call is less limited than syntaxOnly but not as comprehensive as address/full.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>AddressGetServersResponse</returns>
        AddressGetServersResponse EmailAddressGetServers (string email);

        /// <summary>
        /// Partially check whether an email address is valid
        /// </summary>
        /// <remarks>
        /// Validate an email address by identifying whether its parent domain has email servers defined.  This call is less limited than syntaxOnly but not as comprehensive as address/full.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of AddressGetServersResponse</returns>
        ApiResponse<AddressGetServersResponse> EmailAddressGetServersWithHttpInfo (string email);
        /// <summary>
        /// Fully validate an email address
        /// </summary>
        /// <remarks>
        /// Performs a full validation of the email address.  Checks for syntactic correctness, identifies the mail server in question if any, and then contacts the email server to validate the existence of the account - without sending any emails.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>FullEmailValidationResponse</returns>
        FullEmailValidationResponse EmailFullValidation (string email);

        /// <summary>
        /// Fully validate an email address
        /// </summary>
        /// <remarks>
        /// Performs a full validation of the email address.  Checks for syntactic correctness, identifies the mail server in question if any, and then contacts the email server to validate the existence of the account - without sending any emails.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of FullEmailValidationResponse</returns>
        ApiResponse<FullEmailValidationResponse> EmailFullValidationWithHttpInfo (string email);
        /// <summary>
        /// Validate email adddress for syntactic correctness only
        /// </summary>
        /// <remarks>
        /// Validate whether a given email address is syntactically correct via a limited local-only check.  Use the address/full API to do a full validation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>AddressVerifySyntaxOnlyResponse</returns>
        AddressVerifySyntaxOnlyResponse EmailPost (string value);

        /// <summary>
        /// Validate email adddress for syntactic correctness only
        /// </summary>
        /// <remarks>
        /// Validate whether a given email address is syntactically correct via a limited local-only check.  Use the address/full API to do a full validation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of AddressVerifySyntaxOnlyResponse</returns>
        ApiResponse<AddressVerifySyntaxOnlyResponse> EmailPostWithHttpInfo (string value);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Partially check whether an email address is valid
        /// </summary>
        /// <remarks>
        /// Validate an email address by identifying whether its parent domain has email servers defined.  This call is less limited than syntaxOnly but not as comprehensive as address/full.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of AddressGetServersResponse</returns>
        System.Threading.Tasks.Task<AddressGetServersResponse> EmailAddressGetServersAsync (string email);

        /// <summary>
        /// Partially check whether an email address is valid
        /// </summary>
        /// <remarks>
        /// Validate an email address by identifying whether its parent domain has email servers defined.  This call is less limited than syntaxOnly but not as comprehensive as address/full.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (AddressGetServersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressGetServersResponse>> EmailAddressGetServersAsyncWithHttpInfo (string email);
        /// <summary>
        /// Fully validate an email address
        /// </summary>
        /// <remarks>
        /// Performs a full validation of the email address.  Checks for syntactic correctness, identifies the mail server in question if any, and then contacts the email server to validate the existence of the account - without sending any emails.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of FullEmailValidationResponse</returns>
        System.Threading.Tasks.Task<FullEmailValidationResponse> EmailFullValidationAsync (string email);

        /// <summary>
        /// Fully validate an email address
        /// </summary>
        /// <remarks>
        /// Performs a full validation of the email address.  Checks for syntactic correctness, identifies the mail server in question if any, and then contacts the email server to validate the existence of the account - without sending any emails.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (FullEmailValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FullEmailValidationResponse>> EmailFullValidationAsyncWithHttpInfo (string email);
        /// <summary>
        /// Validate email adddress for syntactic correctness only
        /// </summary>
        /// <remarks>
        /// Validate whether a given email address is syntactically correct via a limited local-only check.  Use the address/full API to do a full validation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of AddressVerifySyntaxOnlyResponse</returns>
        System.Threading.Tasks.Task<AddressVerifySyntaxOnlyResponse> EmailPostAsync (string value);

        /// <summary>
        /// Validate email adddress for syntactic correctness only
        /// </summary>
        /// <remarks>
        /// Validate whether a given email address is syntactically correct via a limited local-only check.  Use the address/full API to do a full validation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (AddressVerifySyntaxOnlyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressVerifySyntaxOnlyResponse>> EmailPostAsyncWithHttpInfo (string value);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailApi : IEmailApi
    {
        private Cloudmersive.APIClient.NET.Validate.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.Validate.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.Validate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailApi(Cloudmersive.APIClient.NET.Validate.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.Validate.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.Validate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.Validate.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.Validate.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Partially check whether an email address is valid Validate an email address by identifying whether its parent domain has email servers defined.  This call is less limited than syntaxOnly but not as comprehensive as address/full.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>AddressGetServersResponse</returns>
        public AddressGetServersResponse EmailAddressGetServers (string email)
        {
             ApiResponse<AddressGetServersResponse> localVarResponse = EmailAddressGetServersWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Partially check whether an email address is valid Validate an email address by identifying whether its parent domain has email servers defined.  This call is less limited than syntaxOnly but not as comprehensive as address/full.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of AddressGetServersResponse</returns>
        public ApiResponse< AddressGetServersResponse > EmailAddressGetServersWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailAddressGetServers");

            var localVarPath = "/validate/email/address/servers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null && email.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(email); // http body (model) parameter
            }
            else
            {
                localVarPostBody = email; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailAddressGetServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressGetServersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressGetServersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressGetServersResponse)));
        }

        /// <summary>
        /// Partially check whether an email address is valid Validate an email address by identifying whether its parent domain has email servers defined.  This call is less limited than syntaxOnly but not as comprehensive as address/full.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of AddressGetServersResponse</returns>
        public async System.Threading.Tasks.Task<AddressGetServersResponse> EmailAddressGetServersAsync (string email)
        {
             ApiResponse<AddressGetServersResponse> localVarResponse = await EmailAddressGetServersAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Partially check whether an email address is valid Validate an email address by identifying whether its parent domain has email servers defined.  This call is less limited than syntaxOnly but not as comprehensive as address/full.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (AddressGetServersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressGetServersResponse>> EmailAddressGetServersAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailAddressGetServers");

            var localVarPath = "/validate/email/address/servers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null && email.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(email); // http body (model) parameter
            }
            else
            {
                localVarPostBody = email; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailAddressGetServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressGetServersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressGetServersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressGetServersResponse)));
        }

        /// <summary>
        /// Fully validate an email address Performs a full validation of the email address.  Checks for syntactic correctness, identifies the mail server in question if any, and then contacts the email server to validate the existence of the account - without sending any emails.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>FullEmailValidationResponse</returns>
        public FullEmailValidationResponse EmailFullValidation (string email)
        {
             ApiResponse<FullEmailValidationResponse> localVarResponse = EmailFullValidationWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fully validate an email address Performs a full validation of the email address.  Checks for syntactic correctness, identifies the mail server in question if any, and then contacts the email server to validate the existence of the account - without sending any emails.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of FullEmailValidationResponse</returns>
        public ApiResponse< FullEmailValidationResponse > EmailFullValidationWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailFullValidation");

            var localVarPath = "/validate/email/address/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null && email.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(email); // http body (model) parameter
            }
            else
            {
                localVarPostBody = email; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailFullValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FullEmailValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FullEmailValidationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FullEmailValidationResponse)));
        }

        /// <summary>
        /// Fully validate an email address Performs a full validation of the email address.  Checks for syntactic correctness, identifies the mail server in question if any, and then contacts the email server to validate the existence of the account - without sending any emails.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of FullEmailValidationResponse</returns>
        public async System.Threading.Tasks.Task<FullEmailValidationResponse> EmailFullValidationAsync (string email)
        {
             ApiResponse<FullEmailValidationResponse> localVarResponse = await EmailFullValidationAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fully validate an email address Performs a full validation of the email address.  Checks for syntactic correctness, identifies the mail server in question if any, and then contacts the email server to validate the existence of the account - without sending any emails.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (FullEmailValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FullEmailValidationResponse>> EmailFullValidationAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailFullValidation");

            var localVarPath = "/validate/email/address/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null && email.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(email); // http body (model) parameter
            }
            else
            {
                localVarPostBody = email; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailFullValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FullEmailValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FullEmailValidationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FullEmailValidationResponse)));
        }

        /// <summary>
        /// Validate email adddress for syntactic correctness only Validate whether a given email address is syntactically correct via a limited local-only check.  Use the address/full API to do a full validation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>AddressVerifySyntaxOnlyResponse</returns>
        public AddressVerifySyntaxOnlyResponse EmailPost (string value)
        {
             ApiResponse<AddressVerifySyntaxOnlyResponse> localVarResponse = EmailPostWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate email adddress for syntactic correctness only Validate whether a given email address is syntactically correct via a limited local-only check.  Use the address/full API to do a full validation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of AddressVerifySyntaxOnlyResponse</returns>
        public ApiResponse< AddressVerifySyntaxOnlyResponse > EmailPostWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling EmailApi->EmailPost");

            var localVarPath = "/validate/email/address/syntaxOnly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressVerifySyntaxOnlyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressVerifySyntaxOnlyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressVerifySyntaxOnlyResponse)));
        }

        /// <summary>
        /// Validate email adddress for syntactic correctness only Validate whether a given email address is syntactically correct via a limited local-only check.  Use the address/full API to do a full validation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of AddressVerifySyntaxOnlyResponse</returns>
        public async System.Threading.Tasks.Task<AddressVerifySyntaxOnlyResponse> EmailPostAsync (string value)
        {
             ApiResponse<AddressVerifySyntaxOnlyResponse> localVarResponse = await EmailPostAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate email adddress for syntactic correctness only Validate whether a given email address is syntactically correct via a limited local-only check.  Use the address/full API to do a full validation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (AddressVerifySyntaxOnlyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressVerifySyntaxOnlyResponse>> EmailPostAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling EmailApi->EmailPost");

            var localVarPath = "/validate/email/address/syntaxOnly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressVerifySyntaxOnlyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressVerifySyntaxOnlyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressVerifySyntaxOnlyResponse)));
        }

    }
}
