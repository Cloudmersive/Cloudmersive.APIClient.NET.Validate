/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.Validate.Client;
using Cloudmersive.APIClient.NET.Validate.Model;

namespace Cloudmersive.APIClient.NET.Validate.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INameApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the gender of a first name
        /// </summary>
        /// <remarks>
        /// Determines the gender of a first name (given name)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Gender request information</param>
        /// <returns>GetGenderResponse</returns>
        GetGenderResponse NameGetGender (GetGenderRequest input);

        /// <summary>
        /// Get the gender of a first name
        /// </summary>
        /// <remarks>
        /// Determines the gender of a first name (given name)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Gender request information</param>
        /// <returns>ApiResponse of GetGenderResponse</returns>
        ApiResponse<GetGenderResponse> NameGetGenderWithHttpInfo (GetGenderRequest input);
        /// <summary>
        /// Validate a first name
        /// </summary>
        /// <remarks>
        /// Determines if a string is a valid first name (given name)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>FirstNameValidationResponse</returns>
        FirstNameValidationResponse NameValidateFirstName (FirstNameValidationRequest input);

        /// <summary>
        /// Validate a first name
        /// </summary>
        /// <remarks>
        /// Determines if a string is a valid first name (given name)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>ApiResponse of FirstNameValidationResponse</returns>
        ApiResponse<FirstNameValidationResponse> NameValidateFirstNameWithHttpInfo (FirstNameValidationRequest input);
        /// <summary>
        /// Parse and validate a full name
        /// </summary>
        /// <remarks>
        /// Parses a full name string (e.g. \&quot;Mr. Jon van der Waal Jr.\&quot;) into its component parts (and returns these component parts), and then validates whether it is a valid name string or not
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>FullNameValidationResponse</returns>
        FullNameValidationResponse NameValidateFullName (FullNameValidationRequest input);

        /// <summary>
        /// Parse and validate a full name
        /// </summary>
        /// <remarks>
        /// Parses a full name string (e.g. \&quot;Mr. Jon van der Waal Jr.\&quot;) into its component parts (and returns these component parts), and then validates whether it is a valid name string or not
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>ApiResponse of FullNameValidationResponse</returns>
        ApiResponse<FullNameValidationResponse> NameValidateFullNameWithHttpInfo (FullNameValidationRequest input);
        /// <summary>
        /// Validate a last name
        /// </summary>
        /// <remarks>
        /// Determines if a string is a valid last name (surname)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>LastNameValidationResponse</returns>
        LastNameValidationResponse NameValidateLastName (LastNameValidationRequest input);

        /// <summary>
        /// Validate a last name
        /// </summary>
        /// <remarks>
        /// Determines if a string is a valid last name (surname)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>ApiResponse of LastNameValidationResponse</returns>
        ApiResponse<LastNameValidationResponse> NameValidateLastNameWithHttpInfo (LastNameValidationRequest input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the gender of a first name
        /// </summary>
        /// <remarks>
        /// Determines the gender of a first name (given name)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Gender request information</param>
        /// <returns>Task of GetGenderResponse</returns>
        System.Threading.Tasks.Task<GetGenderResponse> NameGetGenderAsync (GetGenderRequest input);

        /// <summary>
        /// Get the gender of a first name
        /// </summary>
        /// <remarks>
        /// Determines the gender of a first name (given name)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Gender request information</param>
        /// <returns>Task of ApiResponse (GetGenderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGenderResponse>> NameGetGenderAsyncWithHttpInfo (GetGenderRequest input);
        /// <summary>
        /// Validate a first name
        /// </summary>
        /// <remarks>
        /// Determines if a string is a valid first name (given name)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>Task of FirstNameValidationResponse</returns>
        System.Threading.Tasks.Task<FirstNameValidationResponse> NameValidateFirstNameAsync (FirstNameValidationRequest input);

        /// <summary>
        /// Validate a first name
        /// </summary>
        /// <remarks>
        /// Determines if a string is a valid first name (given name)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>Task of ApiResponse (FirstNameValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstNameValidationResponse>> NameValidateFirstNameAsyncWithHttpInfo (FirstNameValidationRequest input);
        /// <summary>
        /// Parse and validate a full name
        /// </summary>
        /// <remarks>
        /// Parses a full name string (e.g. \&quot;Mr. Jon van der Waal Jr.\&quot;) into its component parts (and returns these component parts), and then validates whether it is a valid name string or not
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>Task of FullNameValidationResponse</returns>
        System.Threading.Tasks.Task<FullNameValidationResponse> NameValidateFullNameAsync (FullNameValidationRequest input);

        /// <summary>
        /// Parse and validate a full name
        /// </summary>
        /// <remarks>
        /// Parses a full name string (e.g. \&quot;Mr. Jon van der Waal Jr.\&quot;) into its component parts (and returns these component parts), and then validates whether it is a valid name string or not
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>Task of ApiResponse (FullNameValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FullNameValidationResponse>> NameValidateFullNameAsyncWithHttpInfo (FullNameValidationRequest input);
        /// <summary>
        /// Validate a last name
        /// </summary>
        /// <remarks>
        /// Determines if a string is a valid last name (surname)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>Task of LastNameValidationResponse</returns>
        System.Threading.Tasks.Task<LastNameValidationResponse> NameValidateLastNameAsync (LastNameValidationRequest input);

        /// <summary>
        /// Validate a last name
        /// </summary>
        /// <remarks>
        /// Determines if a string is a valid last name (surname)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>Task of ApiResponse (LastNameValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LastNameValidationResponse>> NameValidateLastNameAsyncWithHttpInfo (LastNameValidationRequest input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NameApi : INameApi
    {
        private Cloudmersive.APIClient.NET.Validate.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NameApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NameApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.Validate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NameApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NameApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.Validate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.Validate.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the gender of a first name Determines the gender of a first name (given name)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Gender request information</param>
        /// <returns>GetGenderResponse</returns>
        public GetGenderResponse NameGetGender (GetGenderRequest input)
        {
             ApiResponse<GetGenderResponse> localVarResponse = NameGetGenderWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the gender of a first name Determines the gender of a first name (given name)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Gender request information</param>
        /// <returns>ApiResponse of GetGenderResponse</returns>
        public ApiResponse< GetGenderResponse > NameGetGenderWithHttpInfo (GetGenderRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling NameApi->NameGetGender");

            var localVarPath = "/validate/name/get-gender";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NameGetGender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGenderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetGenderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGenderResponse)));
        }

        /// <summary>
        /// Get the gender of a first name Determines the gender of a first name (given name)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Gender request information</param>
        /// <returns>Task of GetGenderResponse</returns>
        public async System.Threading.Tasks.Task<GetGenderResponse> NameGetGenderAsync (GetGenderRequest input)
        {
             ApiResponse<GetGenderResponse> localVarResponse = await NameGetGenderAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the gender of a first name Determines the gender of a first name (given name)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Gender request information</param>
        /// <returns>Task of ApiResponse (GetGenderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGenderResponse>> NameGetGenderAsyncWithHttpInfo (GetGenderRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling NameApi->NameGetGender");

            var localVarPath = "/validate/name/get-gender";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NameGetGender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGenderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetGenderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGenderResponse)));
        }

        /// <summary>
        /// Validate a first name Determines if a string is a valid first name (given name)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>FirstNameValidationResponse</returns>
        public FirstNameValidationResponse NameValidateFirstName (FirstNameValidationRequest input)
        {
             ApiResponse<FirstNameValidationResponse> localVarResponse = NameValidateFirstNameWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a first name Determines if a string is a valid first name (given name)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>ApiResponse of FirstNameValidationResponse</returns>
        public ApiResponse< FirstNameValidationResponse > NameValidateFirstNameWithHttpInfo (FirstNameValidationRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling NameApi->NameValidateFirstName");

            var localVarPath = "/validate/name/first";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NameValidateFirstName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstNameValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstNameValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstNameValidationResponse)));
        }

        /// <summary>
        /// Validate a first name Determines if a string is a valid first name (given name)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>Task of FirstNameValidationResponse</returns>
        public async System.Threading.Tasks.Task<FirstNameValidationResponse> NameValidateFirstNameAsync (FirstNameValidationRequest input)
        {
             ApiResponse<FirstNameValidationResponse> localVarResponse = await NameValidateFirstNameAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate a first name Determines if a string is a valid first name (given name)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>Task of ApiResponse (FirstNameValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FirstNameValidationResponse>> NameValidateFirstNameAsyncWithHttpInfo (FirstNameValidationRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling NameApi->NameValidateFirstName");

            var localVarPath = "/validate/name/first";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NameValidateFirstName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstNameValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstNameValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstNameValidationResponse)));
        }

        /// <summary>
        /// Parse and validate a full name Parses a full name string (e.g. \&quot;Mr. Jon van der Waal Jr.\&quot;) into its component parts (and returns these component parts), and then validates whether it is a valid name string or not
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>FullNameValidationResponse</returns>
        public FullNameValidationResponse NameValidateFullName (FullNameValidationRequest input)
        {
             ApiResponse<FullNameValidationResponse> localVarResponse = NameValidateFullNameWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Parse and validate a full name Parses a full name string (e.g. \&quot;Mr. Jon van der Waal Jr.\&quot;) into its component parts (and returns these component parts), and then validates whether it is a valid name string or not
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>ApiResponse of FullNameValidationResponse</returns>
        public ApiResponse< FullNameValidationResponse > NameValidateFullNameWithHttpInfo (FullNameValidationRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling NameApi->NameValidateFullName");

            var localVarPath = "/validate/name/full-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NameValidateFullName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FullNameValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FullNameValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FullNameValidationResponse)));
        }

        /// <summary>
        /// Parse and validate a full name Parses a full name string (e.g. \&quot;Mr. Jon van der Waal Jr.\&quot;) into its component parts (and returns these component parts), and then validates whether it is a valid name string or not
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>Task of FullNameValidationResponse</returns>
        public async System.Threading.Tasks.Task<FullNameValidationResponse> NameValidateFullNameAsync (FullNameValidationRequest input)
        {
             ApiResponse<FullNameValidationResponse> localVarResponse = await NameValidateFullNameAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Parse and validate a full name Parses a full name string (e.g. \&quot;Mr. Jon van der Waal Jr.\&quot;) into its component parts (and returns these component parts), and then validates whether it is a valid name string or not
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>Task of ApiResponse (FullNameValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FullNameValidationResponse>> NameValidateFullNameAsyncWithHttpInfo (FullNameValidationRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling NameApi->NameValidateFullName");

            var localVarPath = "/validate/name/full-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NameValidateFullName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FullNameValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FullNameValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FullNameValidationResponse)));
        }

        /// <summary>
        /// Validate a last name Determines if a string is a valid last name (surname)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>LastNameValidationResponse</returns>
        public LastNameValidationResponse NameValidateLastName (LastNameValidationRequest input)
        {
             ApiResponse<LastNameValidationResponse> localVarResponse = NameValidateLastNameWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a last name Determines if a string is a valid last name (surname)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>ApiResponse of LastNameValidationResponse</returns>
        public ApiResponse< LastNameValidationResponse > NameValidateLastNameWithHttpInfo (LastNameValidationRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling NameApi->NameValidateLastName");

            var localVarPath = "/validate/name/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NameValidateLastName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LastNameValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LastNameValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LastNameValidationResponse)));
        }

        /// <summary>
        /// Validate a last name Determines if a string is a valid last name (surname)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>Task of LastNameValidationResponse</returns>
        public async System.Threading.Tasks.Task<LastNameValidationResponse> NameValidateLastNameAsync (LastNameValidationRequest input)
        {
             ApiResponse<LastNameValidationResponse> localVarResponse = await NameValidateLastNameAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate a last name Determines if a string is a valid last name (surname)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Validate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Validation request information</param>
        /// <returns>Task of ApiResponse (LastNameValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LastNameValidationResponse>> NameValidateLastNameAsyncWithHttpInfo (LastNameValidationRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling NameApi->NameValidateLastName");

            var localVarPath = "/validate/name/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NameValidateLastName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LastNameValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LastNameValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LastNameValidationResponse)));
        }

    }
}
